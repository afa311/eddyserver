// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: db.request.proto

#ifndef PROTOBUF_db_2erequest_2eproto__INCLUDED
#define PROTOBUF_db_2erequest_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace proto_db {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_db_2erequest_2eproto();
void protobuf_AssignDesc_db_2erequest_2eproto();
void protobuf_ShutdownFile_db_2erequest_2eproto();

class Request;

enum Request_ActoinType {
  Request_ActoinType_kSelect = 1,
  Request_ActoinType_kInsert = 2,
  Request_ActoinType_kUpdate = 3,
  Request_ActoinType_kDelete = 4
};
bool Request_ActoinType_IsValid(int value);
const Request_ActoinType Request_ActoinType_ActoinType_MIN = Request_ActoinType_kSelect;
const Request_ActoinType Request_ActoinType_ActoinType_MAX = Request_ActoinType_kDelete;
const int Request_ActoinType_ActoinType_ARRAYSIZE = Request_ActoinType_ActoinType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_ActoinType_descriptor();
inline const ::std::string& Request_ActoinType_Name(Request_ActoinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_ActoinType_descriptor(), value);
}
inline bool Request_ActoinType_Parse(
    const ::std::string& name, Request_ActoinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_ActoinType>(
    Request_ActoinType_descriptor(), name, value);
}
enum Request_DatabaseType {
  Request_DatabaseType_kRedis = 1,
  Request_DatabaseType_kMySQL = 2
};
bool Request_DatabaseType_IsValid(int value);
const Request_DatabaseType Request_DatabaseType_DatabaseType_MIN = Request_DatabaseType_kRedis;
const Request_DatabaseType Request_DatabaseType_DatabaseType_MAX = Request_DatabaseType_kMySQL;
const int Request_DatabaseType_DatabaseType_ARRAYSIZE = Request_DatabaseType_DatabaseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* Request_DatabaseType_descriptor();
inline const ::std::string& Request_DatabaseType_Name(Request_DatabaseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    Request_DatabaseType_descriptor(), value);
}
inline bool Request_DatabaseType_Parse(
    const ::std::string& name, Request_DatabaseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Request_DatabaseType>(
    Request_DatabaseType_descriptor(), name, value);
}
// ===================================================================

class Request : public ::google::protobuf::Message {
 public:
  Request();
  virtual ~Request();

  Request(const Request& from);

  inline Request& operator=(const Request& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Request& default_instance();

  void Swap(Request* other);

  // implements Message ----------------------------------------------

  Request* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Request& from);
  void MergeFrom(const Request& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef Request_ActoinType ActoinType;
  static const ActoinType kSelect = Request_ActoinType_kSelect;
  static const ActoinType kInsert = Request_ActoinType_kInsert;
  static const ActoinType kUpdate = Request_ActoinType_kUpdate;
  static const ActoinType kDelete = Request_ActoinType_kDelete;
  static inline bool ActoinType_IsValid(int value) {
    return Request_ActoinType_IsValid(value);
  }
  static const ActoinType ActoinType_MIN =
    Request_ActoinType_ActoinType_MIN;
  static const ActoinType ActoinType_MAX =
    Request_ActoinType_ActoinType_MAX;
  static const int ActoinType_ARRAYSIZE =
    Request_ActoinType_ActoinType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActoinType_descriptor() {
    return Request_ActoinType_descriptor();
  }
  static inline const ::std::string& ActoinType_Name(ActoinType value) {
    return Request_ActoinType_Name(value);
  }
  static inline bool ActoinType_Parse(const ::std::string& name,
      ActoinType* value) {
    return Request_ActoinType_Parse(name, value);
  }

  typedef Request_DatabaseType DatabaseType;
  static const DatabaseType kRedis = Request_DatabaseType_kRedis;
  static const DatabaseType kMySQL = Request_DatabaseType_kMySQL;
  static inline bool DatabaseType_IsValid(int value) {
    return Request_DatabaseType_IsValid(value);
  }
  static const DatabaseType DatabaseType_MIN =
    Request_DatabaseType_DatabaseType_MIN;
  static const DatabaseType DatabaseType_MAX =
    Request_DatabaseType_DatabaseType_MAX;
  static const int DatabaseType_ARRAYSIZE =
    Request_DatabaseType_DatabaseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DatabaseType_descriptor() {
    return Request_DatabaseType_descriptor();
  }
  static inline const ::std::string& DatabaseType_Name(DatabaseType value) {
    return Request_DatabaseType_Name(value);
  }
  static inline bool DatabaseType_Parse(const ::std::string& name,
      DatabaseType* value) {
    return Request_DatabaseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 identifier = 1;
  inline bool has_identifier() const;
  inline void clear_identifier();
  static const int kIdentifierFieldNumber = 1;
  inline ::google::protobuf::uint32 identifier() const;
  inline void set_identifier(::google::protobuf::uint32 value);

  // required .proto_db.Request.DatabaseType dbtype = 2;
  inline bool has_dbtype() const;
  inline void clear_dbtype();
  static const int kDbtypeFieldNumber = 2;
  inline ::proto_db::Request_DatabaseType dbtype() const;
  inline void set_dbtype(::proto_db::Request_DatabaseType value);

  // required .proto_db.Request.ActoinType action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::proto_db::Request_ActoinType action() const;
  inline void set_action(::proto_db::Request_ActoinType value);

  // required string dbname = 4;
  inline bool has_dbname() const;
  inline void clear_dbname();
  static const int kDbnameFieldNumber = 4;
  inline const ::std::string& dbname() const;
  inline void set_dbname(const ::std::string& value);
  inline void set_dbname(const char* value);
  inline void set_dbname(const char* value, size_t size);
  inline ::std::string* mutable_dbname();
  inline ::std::string* release_dbname();
  inline void set_allocated_dbname(::std::string* dbname);

  // optional string statement = 5;
  inline bool has_statement() const;
  inline void clear_statement();
  static const int kStatementFieldNumber = 5;
  inline const ::std::string& statement() const;
  inline void set_statement(const ::std::string& value);
  inline void set_statement(const char* value);
  inline void set_statement(const char* value, size_t size);
  inline ::std::string* mutable_statement();
  inline ::std::string* release_statement();
  inline void set_allocated_statement(::std::string* statement);

  // @@protoc_insertion_point(class_scope:proto_db.Request)
 private:
  inline void set_has_identifier();
  inline void clear_has_identifier();
  inline void set_has_dbtype();
  inline void clear_has_dbtype();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_dbname();
  inline void clear_has_dbname();
  inline void set_has_statement();
  inline void clear_has_statement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 identifier_;
  int dbtype_;
  ::std::string* dbname_;
  ::std::string* statement_;
  int action_;
  friend void  protobuf_AddDesc_db_2erequest_2eproto();
  friend void protobuf_AssignDesc_db_2erequest_2eproto();
  friend void protobuf_ShutdownFile_db_2erequest_2eproto();

  void InitAsDefaultInstance();
  static Request* default_instance_;
};
// ===================================================================


// ===================================================================

// Request

// required uint32 identifier = 1;
inline bool Request::has_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Request::set_has_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Request::clear_has_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Request::clear_identifier() {
  identifier_ = 0u;
  clear_has_identifier();
}
inline ::google::protobuf::uint32 Request::identifier() const {
  // @@protoc_insertion_point(field_get:proto_db.Request.identifier)
  return identifier_;
}
inline void Request::set_identifier(::google::protobuf::uint32 value) {
  set_has_identifier();
  identifier_ = value;
  // @@protoc_insertion_point(field_set:proto_db.Request.identifier)
}

// required .proto_db.Request.DatabaseType dbtype = 2;
inline bool Request::has_dbtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Request::set_has_dbtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Request::clear_has_dbtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Request::clear_dbtype() {
  dbtype_ = 1;
  clear_has_dbtype();
}
inline ::proto_db::Request_DatabaseType Request::dbtype() const {
  // @@protoc_insertion_point(field_get:proto_db.Request.dbtype)
  return static_cast< ::proto_db::Request_DatabaseType >(dbtype_);
}
inline void Request::set_dbtype(::proto_db::Request_DatabaseType value) {
  assert(::proto_db::Request_DatabaseType_IsValid(value));
  set_has_dbtype();
  dbtype_ = value;
  // @@protoc_insertion_point(field_set:proto_db.Request.dbtype)
}

// required .proto_db.Request.ActoinType action = 3;
inline bool Request::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Request::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Request::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Request::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::proto_db::Request_ActoinType Request::action() const {
  // @@protoc_insertion_point(field_get:proto_db.Request.action)
  return static_cast< ::proto_db::Request_ActoinType >(action_);
}
inline void Request::set_action(::proto_db::Request_ActoinType value) {
  assert(::proto_db::Request_ActoinType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:proto_db.Request.action)
}

// required string dbname = 4;
inline bool Request::has_dbname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Request::set_has_dbname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Request::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Request::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& Request::dbname() const {
  // @@protoc_insertion_point(field_get:proto_db.Request.dbname)
  return *dbname_;
}
inline void Request::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
  // @@protoc_insertion_point(field_set:proto_db.Request.dbname)
}
inline void Request::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_db.Request.dbname)
}
inline void Request::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_db.Request.dbname)
}
inline ::std::string* Request::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto_db.Request.dbname)
  return dbname_;
}
inline ::std::string* Request::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_dbname(::std::string* dbname) {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (dbname) {
    set_has_dbname();
    dbname_ = dbname;
  } else {
    clear_has_dbname();
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto_db.Request.dbname)
}

// optional string statement = 5;
inline bool Request::has_statement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Request::set_has_statement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Request::clear_has_statement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Request::clear_statement() {
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_->clear();
  }
  clear_has_statement();
}
inline const ::std::string& Request::statement() const {
  // @@protoc_insertion_point(field_get:proto_db.Request.statement)
  return *statement_;
}
inline void Request::set_statement(const ::std::string& value) {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  statement_->assign(value);
  // @@protoc_insertion_point(field_set:proto_db.Request.statement)
}
inline void Request::set_statement(const char* value) {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  statement_->assign(value);
  // @@protoc_insertion_point(field_set_char:proto_db.Request.statement)
}
inline void Request::set_statement(const char* value, size_t size) {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  statement_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto_db.Request.statement)
}
inline ::std::string* Request::mutable_statement() {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:proto_db.Request.statement)
  return statement_;
}
inline ::std::string* Request::release_statement() {
  clear_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statement_;
    statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Request::set_allocated_statement(::std::string* statement) {
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statement_;
  }
  if (statement) {
    set_has_statement();
    statement_ = statement;
  } else {
    clear_has_statement();
    statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:proto_db.Request.statement)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto_db

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto_db::Request_ActoinType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_db::Request_ActoinType>() {
  return ::proto_db::Request_ActoinType_descriptor();
}
template <> struct is_proto_enum< ::proto_db::Request_DatabaseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::proto_db::Request_DatabaseType>() {
  return ::proto_db::Request_DatabaseType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_db_2erequest_2eproto__INCLUDED
