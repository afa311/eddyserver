// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/internal.protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/internal.protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace internal {

namespace {

const ::google::protobuf::Descriptor* PingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginDBProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDBProxyReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginDBProxyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDBProxyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDBProxyReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDBProxyReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryDBProxyReq_ActoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryDBProxyReq_DatabaseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryDBProxyRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDBProxyRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBErrorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBProxyErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBProxyErrorRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DBProxyErrorRsp_ErrorCode_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2finternal_2eprotocol_2eproto() {
  protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/internal.protocol.proto");
  GOOGLE_CHECK(file != NULL);
  PingReq_descriptor_ = file->message_type(0);
  static const int PingReq_offsets_[1] = {
  };
  PingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingReq_descriptor_,
      PingReq::default_instance_,
      PingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingReq));
  PongRsp_descriptor_ = file->message_type(1);
  static const int PongRsp_offsets_[1] = {
  };
  PongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PongRsp_descriptor_,
      PongRsp::default_instance_,
      PongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PongRsp));
  LoginDBProxyReq_descriptor_ = file->message_type(2);
  static const int LoginDBProxyReq_offsets_[1] = {
  };
  LoginDBProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDBProxyReq_descriptor_,
      LoginDBProxyReq::default_instance_,
      LoginDBProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDBProxyReq));
  LoginDBProxyRsp_descriptor_ = file->message_type(3);
  static const int LoginDBProxyRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBProxyRsp, heartbeat_interval_),
  };
  LoginDBProxyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDBProxyRsp_descriptor_,
      LoginDBProxyRsp::default_instance_,
      LoginDBProxyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBProxyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBProxyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDBProxyRsp));
  QueryDBProxyReq_descriptor_ = file->message_type(4);
  static const int QueryDBProxyReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, dbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, statement_),
  };
  QueryDBProxyReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDBProxyReq_descriptor_,
      QueryDBProxyReq::default_instance_,
      QueryDBProxyReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDBProxyReq));
  QueryDBProxyReq_ActoinType_descriptor_ = QueryDBProxyReq_descriptor_->enum_type(0);
  QueryDBProxyReq_DatabaseType_descriptor_ = QueryDBProxyReq_descriptor_->enum_type(1);
  QueryDBProxyRsp_descriptor_ = file->message_type(5);
  static const int QueryDBProxyRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyRsp, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyRsp, result_),
  };
  QueryDBProxyRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDBProxyRsp_descriptor_,
      QueryDBProxyRsp::default_instance_,
      QueryDBProxyRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBProxyRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDBProxyRsp));
  DBErrorRsp_descriptor_ = file->message_type(6);
  static const int DBErrorRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, what_),
  };
  DBErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBErrorRsp_descriptor_,
      DBErrorRsp::default_instance_,
      DBErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBErrorRsp));
  DBProxyErrorRsp_descriptor_ = file->message_type(7);
  static const int DBProxyErrorRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyErrorRsp, sequence_),
  };
  DBProxyErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBProxyErrorRsp_descriptor_,
      DBProxyErrorRsp::default_instance_,
      DBProxyErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBProxyErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBProxyErrorRsp));
  DBProxyErrorRsp_ErrorCode_descriptor_ = DBProxyErrorRsp_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2finternal_2eprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingReq_descriptor_, &PingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PongRsp_descriptor_, &PongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDBProxyReq_descriptor_, &LoginDBProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDBProxyRsp_descriptor_, &LoginDBProxyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDBProxyReq_descriptor_, &QueryDBProxyReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDBProxyRsp_descriptor_, &QueryDBProxyRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBErrorRsp_descriptor_, &DBErrorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBProxyErrorRsp_descriptor_, &DBProxyErrorRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2finternal_2eprotocol_2eproto() {
  delete PingReq::default_instance_;
  delete PingReq_reflection_;
  delete PongRsp::default_instance_;
  delete PongRsp_reflection_;
  delete LoginDBProxyReq::default_instance_;
  delete LoginDBProxyReq_reflection_;
  delete LoginDBProxyRsp::default_instance_;
  delete LoginDBProxyRsp_reflection_;
  delete QueryDBProxyReq::default_instance_;
  delete QueryDBProxyReq_reflection_;
  delete QueryDBProxyRsp::default_instance_;
  delete QueryDBProxyRsp_reflection_;
  delete DBErrorRsp::default_instance_;
  delete DBErrorRsp_reflection_;
  delete DBProxyErrorRsp::default_instance_;
  delete DBProxyErrorRsp_reflection_;
}

void protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035proto/internal.protocol.proto\022\010interna"
    "l\"\t\n\007PingReq\"\t\n\007PongRsp\"\021\n\017LoginDBProxyR"
    "eq\"-\n\017LoginDBProxyRsp\022\032\n\022heartbeat_inter"
    "val\030\001 \001(\r\"\236\002\n\017QueryDBProxyReq\022\020\n\010sequenc"
    "e\030\001 \002(\r\0226\n\006dbtype\030\002 \002(\0162&.internal.Query"
    "DBProxyReq.DatabaseType\0224\n\006action\030\003 \002(\0162"
    "$.internal.QueryDBProxyReq.ActoinType\022\016\n"
    "\006dbname\030\004 \002(\t\022\021\n\tstatement\030\005 \001(\t\"@\n\nActo"
    "inType\022\013\n\007kSelect\020\001\022\013\n\007kInsert\020\002\022\013\n\007kUpd"
    "ate\020\003\022\013\n\007kDelete\020\004\"&\n\014DatabaseType\022\n\n\006kR"
    "edis\020\001\022\n\n\006kMySQL\020\002\"3\n\017QueryDBProxyRsp\022\020\n"
    "\010sequence\030\001 \002(\r\022\016\n\006result\030\002 \001(\t\"@\n\nDBErr"
    "orRsp\022\020\n\010sequence\030\001 \002(\r\022\022\n\nerror_code\030\002 "
    "\002(\005\022\014\n\004what\030\003 \001(\t\"\373\001\n\017DBProxyErrorRsp\0227\n"
    "\nerror_code\030\001 \002(\0162#.internal.DBProxyErro"
    "rRsp.ErrorCode\022\020\n\010sequence\030\002 \001(\r\"\234\001\n\tErr"
    "orCode\022\016\n\nkNotLogged\020\001\022\017\n\013kDisconnect\020\002\022"
    "\021\n\rkNotConnected\020\003\022\024\n\020kInvalidProtocol\020\004"
    "\022\022\n\016kInvalidAction\020\005\022\025\n\021kNotFoundDatabas"
    "e\020\006\022\032\n\026kResourceInsufficiency\020\007", 791);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/internal.protocol.proto", &protobuf_RegisterTypes);
  PingReq::default_instance_ = new PingReq();
  PongRsp::default_instance_ = new PongRsp();
  LoginDBProxyReq::default_instance_ = new LoginDBProxyReq();
  LoginDBProxyRsp::default_instance_ = new LoginDBProxyRsp();
  QueryDBProxyReq::default_instance_ = new QueryDBProxyReq();
  QueryDBProxyRsp::default_instance_ = new QueryDBProxyRsp();
  DBErrorRsp::default_instance_ = new DBErrorRsp();
  DBProxyErrorRsp::default_instance_ = new DBProxyErrorRsp();
  PingReq::default_instance_->InitAsDefaultInstance();
  PongRsp::default_instance_->InitAsDefaultInstance();
  LoginDBProxyReq::default_instance_->InitAsDefaultInstance();
  LoginDBProxyRsp::default_instance_->InitAsDefaultInstance();
  QueryDBProxyReq::default_instance_->InitAsDefaultInstance();
  QueryDBProxyRsp::default_instance_->InitAsDefaultInstance();
  DBErrorRsp::default_instance_->InitAsDefaultInstance();
  DBProxyErrorRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2finternal_2eprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2finternal_2eprotocol_2eproto {
  StaticDescriptorInitializer_proto_2finternal_2eprotocol_2eproto() {
    protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  }
} static_descriptor_initializer_proto_2finternal_2eprotocol_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PingReq::PingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.PingReq)
}

void PingReq::InitAsDefaultInstance() {
}

PingReq::PingReq(const PingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.PingReq)
}

void PingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingReq::~PingReq() {
  // @@protoc_insertion_point(destructor:internal.PingReq)
  SharedDtor();
}

void PingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingReq_descriptor_;
}

const PingReq& PingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

PingReq* PingReq::default_instance_ = NULL;

PingReq* PingReq::New() const {
  return new PingReq;
}

void PingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.PingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.PingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.PingReq)
  return false;
#undef DO_
}

void PingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.PingReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.PingReq)
}

::google::protobuf::uint8* PingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.PingReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.PingReq)
  return target;
}

int PingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingReq::MergeFrom(const PingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingReq::CopyFrom(const PingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReq::IsInitialized() const {

  return true;
}

void PingReq::Swap(PingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingReq_descriptor_;
  metadata.reflection = PingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PongRsp::PongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.PongRsp)
}

void PongRsp::InitAsDefaultInstance() {
}

PongRsp::PongRsp(const PongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.PongRsp)
}

void PongRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PongRsp::~PongRsp() {
  // @@protoc_insertion_point(destructor:internal.PongRsp)
  SharedDtor();
}

void PongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PongRsp_descriptor_;
}

const PongRsp& PongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

PongRsp* PongRsp::default_instance_ = NULL;

PongRsp* PongRsp::New() const {
  return new PongRsp;
}

void PongRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.PongRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.PongRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.PongRsp)
  return false;
#undef DO_
}

void PongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.PongRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.PongRsp)
}

::google::protobuf::uint8* PongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.PongRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.PongRsp)
  return target;
}

int PongRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PongRsp::MergeFrom(const PongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongRsp::CopyFrom(const PongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongRsp::IsInitialized() const {

  return true;
}

void PongRsp::Swap(PongRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PongRsp_descriptor_;
  metadata.reflection = PongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginDBProxyReq::LoginDBProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.LoginDBProxyReq)
}

void LoginDBProxyReq::InitAsDefaultInstance() {
}

LoginDBProxyReq::LoginDBProxyReq(const LoginDBProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.LoginDBProxyReq)
}

void LoginDBProxyReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDBProxyReq::~LoginDBProxyReq() {
  // @@protoc_insertion_point(destructor:internal.LoginDBProxyReq)
  SharedDtor();
}

void LoginDBProxyReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginDBProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDBProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDBProxyReq_descriptor_;
}

const LoginDBProxyReq& LoginDBProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

LoginDBProxyReq* LoginDBProxyReq::default_instance_ = NULL;

LoginDBProxyReq* LoginDBProxyReq::New() const {
  return new LoginDBProxyReq;
}

void LoginDBProxyReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDBProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.LoginDBProxyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.LoginDBProxyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.LoginDBProxyReq)
  return false;
#undef DO_
}

void LoginDBProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.LoginDBProxyReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.LoginDBProxyReq)
}

::google::protobuf::uint8* LoginDBProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.LoginDBProxyReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.LoginDBProxyReq)
  return target;
}

int LoginDBProxyReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDBProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDBProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDBProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDBProxyReq::MergeFrom(const LoginDBProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDBProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDBProxyReq::CopyFrom(const LoginDBProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDBProxyReq::IsInitialized() const {

  return true;
}

void LoginDBProxyReq::Swap(LoginDBProxyReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDBProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDBProxyReq_descriptor_;
  metadata.reflection = LoginDBProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginDBProxyRsp::kHeartbeatIntervalFieldNumber;
#endif  // !_MSC_VER

LoginDBProxyRsp::LoginDBProxyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.LoginDBProxyRsp)
}

void LoginDBProxyRsp::InitAsDefaultInstance() {
}

LoginDBProxyRsp::LoginDBProxyRsp(const LoginDBProxyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.LoginDBProxyRsp)
}

void LoginDBProxyRsp::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDBProxyRsp::~LoginDBProxyRsp() {
  // @@protoc_insertion_point(destructor:internal.LoginDBProxyRsp)
  SharedDtor();
}

void LoginDBProxyRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginDBProxyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDBProxyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDBProxyRsp_descriptor_;
}

const LoginDBProxyRsp& LoginDBProxyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

LoginDBProxyRsp* LoginDBProxyRsp::default_instance_ = NULL;

LoginDBProxyRsp* LoginDBProxyRsp::New() const {
  return new LoginDBProxyRsp;
}

void LoginDBProxyRsp::Clear() {
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDBProxyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.LoginDBProxyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional uint32 heartbeat_interval = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_)));
          set_has_heartbeat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.LoginDBProxyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.LoginDBProxyRsp)
  return false;
#undef DO_
}

void LoginDBProxyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.LoginDBProxyRsp)
  // optional uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heartbeat_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.LoginDBProxyRsp)
}

::google::protobuf::uint8* LoginDBProxyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.LoginDBProxyRsp)
  // optional uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heartbeat_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.LoginDBProxyRsp)
  return target;
}

int LoginDBProxyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional uint32 heartbeat_interval = 1;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDBProxyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDBProxyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDBProxyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDBProxyRsp::MergeFrom(const LoginDBProxyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_interval()) {
      set_heartbeat_interval(from.heartbeat_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDBProxyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDBProxyRsp::CopyFrom(const LoginDBProxyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDBProxyRsp::IsInitialized() const {

  return true;
}

void LoginDBProxyRsp::Swap(LoginDBProxyRsp* other) {
  if (other != this) {
    std::swap(heartbeat_interval_, other->heartbeat_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDBProxyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDBProxyRsp_descriptor_;
  metadata.reflection = LoginDBProxyRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QueryDBProxyReq_ActoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBProxyReq_ActoinType_descriptor_;
}
bool QueryDBProxyReq_ActoinType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryDBProxyReq_ActoinType QueryDBProxyReq::kSelect;
const QueryDBProxyReq_ActoinType QueryDBProxyReq::kInsert;
const QueryDBProxyReq_ActoinType QueryDBProxyReq::kUpdate;
const QueryDBProxyReq_ActoinType QueryDBProxyReq::kDelete;
const QueryDBProxyReq_ActoinType QueryDBProxyReq::ActoinType_MIN;
const QueryDBProxyReq_ActoinType QueryDBProxyReq::ActoinType_MAX;
const int QueryDBProxyReq::ActoinType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QueryDBProxyReq_DatabaseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBProxyReq_DatabaseType_descriptor_;
}
bool QueryDBProxyReq_DatabaseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryDBProxyReq_DatabaseType QueryDBProxyReq::kRedis;
const QueryDBProxyReq_DatabaseType QueryDBProxyReq::kMySQL;
const QueryDBProxyReq_DatabaseType QueryDBProxyReq::DatabaseType_MIN;
const QueryDBProxyReq_DatabaseType QueryDBProxyReq::DatabaseType_MAX;
const int QueryDBProxyReq::DatabaseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QueryDBProxyReq::kSequenceFieldNumber;
const int QueryDBProxyReq::kDbtypeFieldNumber;
const int QueryDBProxyReq::kActionFieldNumber;
const int QueryDBProxyReq::kDbnameFieldNumber;
const int QueryDBProxyReq::kStatementFieldNumber;
#endif  // !_MSC_VER

QueryDBProxyReq::QueryDBProxyReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.QueryDBProxyReq)
}

void QueryDBProxyReq::InitAsDefaultInstance() {
}

QueryDBProxyReq::QueryDBProxyReq(const QueryDBProxyReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.QueryDBProxyReq)
}

void QueryDBProxyReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  dbtype_ = 1;
  action_ = 1;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDBProxyReq::~QueryDBProxyReq() {
  // @@protoc_insertion_point(destructor:internal.QueryDBProxyReq)
  SharedDtor();
}

void QueryDBProxyReq::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statement_;
  }
  if (this != default_instance_) {
  }
}

void QueryDBProxyReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDBProxyReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBProxyReq_descriptor_;
}

const QueryDBProxyReq& QueryDBProxyReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

QueryDBProxyReq* QueryDBProxyReq::default_instance_ = NULL;

QueryDBProxyReq* QueryDBProxyReq::New() const {
  return new QueryDBProxyReq;
}

void QueryDBProxyReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    sequence_ = 0u;
    dbtype_ = 1;
    action_ = 1;
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbname_->clear();
      }
    }
    if (has_statement()) {
      if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDBProxyReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.QueryDBProxyReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbtype;
        break;
      }

      // required .internal.QueryDBProxyReq.DatabaseType dbtype = 2;
      case 2: {
        if (tag == 16) {
         parse_dbtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::QueryDBProxyReq_DatabaseType_IsValid(value)) {
            set_dbtype(static_cast< ::internal::QueryDBProxyReq_DatabaseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // required .internal.QueryDBProxyReq.ActoinType action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::QueryDBProxyReq_ActoinType_IsValid(value)) {
            set_action(static_cast< ::internal::QueryDBProxyReq_ActoinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dbname;
        break;
      }

      // required string dbname = 4;
      case 4: {
        if (tag == 34) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_statement;
        break;
      }

      // optional string statement = 5;
      case 5: {
        if (tag == 42) {
         parse_statement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statement().data(), this->statement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statement");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.QueryDBProxyReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.QueryDBProxyReq)
  return false;
#undef DO_
}

void QueryDBProxyReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.QueryDBProxyReq)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required .internal.QueryDBProxyReq.DatabaseType dbtype = 2;
  if (has_dbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dbtype(), output);
  }

  // required .internal.QueryDBProxyReq.ActoinType action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // required string dbname = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dbname(), output);
  }

  // optional string statement = 5;
  if (has_statement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statement().data(), this->statement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->statement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.QueryDBProxyReq)
}

::google::protobuf::uint8* QueryDBProxyReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.QueryDBProxyReq)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required .internal.QueryDBProxyReq.DatabaseType dbtype = 2;
  if (has_dbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dbtype(), target);
  }

  // required .internal.QueryDBProxyReq.ActoinType action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // required string dbname = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbname(), target);
  }

  // optional string statement = 5;
  if (has_statement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statement().data(), this->statement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->statement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.QueryDBProxyReq)
  return target;
}

int QueryDBProxyReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required .internal.QueryDBProxyReq.DatabaseType dbtype = 2;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dbtype());
    }

    // required .internal.QueryDBProxyReq.ActoinType action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required string dbname = 4;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string statement = 5;
    if (has_statement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDBProxyReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDBProxyReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDBProxyReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDBProxyReq::MergeFrom(const QueryDBProxyReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_dbtype()) {
      set_dbtype(from.dbtype());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_statement()) {
      set_statement(from.statement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDBProxyReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDBProxyReq::CopyFrom(const QueryDBProxyReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDBProxyReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QueryDBProxyReq::Swap(QueryDBProxyReq* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(dbtype_, other->dbtype_);
    std::swap(action_, other->action_);
    std::swap(dbname_, other->dbname_);
    std::swap(statement_, other->statement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDBProxyReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDBProxyReq_descriptor_;
  metadata.reflection = QueryDBProxyReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDBProxyRsp::kSequenceFieldNumber;
const int QueryDBProxyRsp::kResultFieldNumber;
#endif  // !_MSC_VER

QueryDBProxyRsp::QueryDBProxyRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.QueryDBProxyRsp)
}

void QueryDBProxyRsp::InitAsDefaultInstance() {
}

QueryDBProxyRsp::QueryDBProxyRsp(const QueryDBProxyRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.QueryDBProxyRsp)
}

void QueryDBProxyRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDBProxyRsp::~QueryDBProxyRsp() {
  // @@protoc_insertion_point(destructor:internal.QueryDBProxyRsp)
  SharedDtor();
}

void QueryDBProxyRsp::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void QueryDBProxyRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDBProxyRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBProxyRsp_descriptor_;
}

const QueryDBProxyRsp& QueryDBProxyRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

QueryDBProxyRsp* QueryDBProxyRsp::default_instance_ = NULL;

QueryDBProxyRsp* QueryDBProxyRsp::New() const {
  return new QueryDBProxyRsp;
}

void QueryDBProxyRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sequence_ = 0u;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDBProxyRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.QueryDBProxyRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.QueryDBProxyRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.QueryDBProxyRsp)
  return false;
#undef DO_
}

void QueryDBProxyRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.QueryDBProxyRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // optional string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.QueryDBProxyRsp)
}

::google::protobuf::uint8* QueryDBProxyRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.QueryDBProxyRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // optional string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.QueryDBProxyRsp)
  return target;
}

int QueryDBProxyRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDBProxyRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDBProxyRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDBProxyRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDBProxyRsp::MergeFrom(const QueryDBProxyRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDBProxyRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDBProxyRsp::CopyFrom(const QueryDBProxyRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDBProxyRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryDBProxyRsp::Swap(QueryDBProxyRsp* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDBProxyRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDBProxyRsp_descriptor_;
  metadata.reflection = QueryDBProxyRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBErrorRsp::kSequenceFieldNumber;
const int DBErrorRsp::kErrorCodeFieldNumber;
const int DBErrorRsp::kWhatFieldNumber;
#endif  // !_MSC_VER

DBErrorRsp::DBErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.DBErrorRsp)
}

void DBErrorRsp::InitAsDefaultInstance() {
}

DBErrorRsp::DBErrorRsp(const DBErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.DBErrorRsp)
}

void DBErrorRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  error_code_ = 0;
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBErrorRsp::~DBErrorRsp() {
  // @@protoc_insertion_point(destructor:internal.DBErrorRsp)
  SharedDtor();
}

void DBErrorRsp::SharedDtor() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void DBErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBErrorRsp_descriptor_;
}

const DBErrorRsp& DBErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

DBErrorRsp* DBErrorRsp::default_instance_ = NULL;

DBErrorRsp* DBErrorRsp::New() const {
  return new DBErrorRsp;
}

void DBErrorRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBErrorRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sequence_, error_code_);
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.DBErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_what;
        break;
      }

      // optional string what = 3;
      case 3: {
        if (tag == 26) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.DBErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.DBErrorRsp)
  return false;
#undef DO_
}

void DBErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.DBErrorRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.DBErrorRsp)
}

::google::protobuf::uint8* DBErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.DBErrorRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.DBErrorRsp)
  return target;
}

int DBErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string what = 3;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBErrorRsp::MergeFrom(const DBErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBErrorRsp::CopyFrom(const DBErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBErrorRsp::Swap(DBErrorRsp* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(error_code_, other->error_code_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBErrorRsp_descriptor_;
  metadata.reflection = DBErrorRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* DBProxyErrorRsp_ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBProxyErrorRsp_ErrorCode_descriptor_;
}
bool DBProxyErrorRsp_ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kNotLogged;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kDisconnect;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kNotConnected;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kInvalidProtocol;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kInvalidAction;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kNotFoundDatabase;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::kResourceInsufficiency;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::ErrorCode_MIN;
const DBProxyErrorRsp_ErrorCode DBProxyErrorRsp::ErrorCode_MAX;
const int DBProxyErrorRsp::ErrorCode_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int DBProxyErrorRsp::kErrorCodeFieldNumber;
const int DBProxyErrorRsp::kSequenceFieldNumber;
#endif  // !_MSC_VER

DBProxyErrorRsp::DBProxyErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.DBProxyErrorRsp)
}

void DBProxyErrorRsp::InitAsDefaultInstance() {
}

DBProxyErrorRsp::DBProxyErrorRsp(const DBProxyErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.DBProxyErrorRsp)
}

void DBProxyErrorRsp::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 1;
  sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBProxyErrorRsp::~DBProxyErrorRsp() {
  // @@protoc_insertion_point(destructor:internal.DBProxyErrorRsp)
  SharedDtor();
}

void DBProxyErrorRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBProxyErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBProxyErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBProxyErrorRsp_descriptor_;
}

const DBProxyErrorRsp& DBProxyErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

DBProxyErrorRsp* DBProxyErrorRsp::default_instance_ = NULL;

DBProxyErrorRsp* DBProxyErrorRsp::New() const {
  return new DBProxyErrorRsp;
}

void DBProxyErrorRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_code_ = 1;
    sequence_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBProxyErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.DBProxyErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.DBProxyErrorRsp.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::DBProxyErrorRsp_ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::internal::DBProxyErrorRsp_ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.DBProxyErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.DBProxyErrorRsp)
  return false;
#undef DO_
}

void DBProxyErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.DBProxyErrorRsp)
  // required .internal.DBProxyErrorRsp.ErrorCode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.DBProxyErrorRsp)
}

::google::protobuf::uint8* DBProxyErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.DBProxyErrorRsp)
  // required .internal.DBProxyErrorRsp.ErrorCode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.DBProxyErrorRsp)
  return target;
}

int DBProxyErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.DBProxyErrorRsp.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBProxyErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBProxyErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBProxyErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBProxyErrorRsp::MergeFrom(const DBProxyErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBProxyErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBProxyErrorRsp::CopyFrom(const DBProxyErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBProxyErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DBProxyErrorRsp::Swap(DBProxyErrorRsp* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBProxyErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBProxyErrorRsp_descriptor_;
  metadata.reflection = DBProxyErrorRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal

// @@protoc_insertion_point(global_scope)
