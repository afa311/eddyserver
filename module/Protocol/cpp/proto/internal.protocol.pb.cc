// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/internal.protocol.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/internal.protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace internal {

namespace {

const ::google::protobuf::Descriptor* PingReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PingReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* PongRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PongRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginDBAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDBAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginDBAgentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDBAgentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAgentInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAgentInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAgentInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAgentInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDBAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDBAgentReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_ActoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_DatabaseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryDBAgentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDBAgentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBErrorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAgentErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAgentErrorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterErrorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRouterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRouterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRouterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRouterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardMessageRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastMessageReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastMessageReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastMessageRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastMessageRsp_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2finternal_2eprotocol_2eproto() {
  protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/internal.protocol.proto");
  GOOGLE_CHECK(file != NULL);
  PingReq_descriptor_ = file->message_type(0);
  static const int PingReq_offsets_[1] = {
  };
  PingReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PingReq_descriptor_,
      PingReq::default_instance_,
      PingReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PingReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PingReq));
  PongRsp_descriptor_ = file->message_type(1);
  static const int PongRsp_offsets_[1] = {
  };
  PongRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PongRsp_descriptor_,
      PongRsp::default_instance_,
      PongRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PongRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PongRsp));
  LoginDBAgentReq_descriptor_ = file->message_type(2);
  static const int LoginDBAgentReq_offsets_[1] = {
  };
  LoginDBAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDBAgentReq_descriptor_,
      LoginDBAgentReq::default_instance_,
      LoginDBAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDBAgentReq));
  LoginDBAgentRsp_descriptor_ = file->message_type(3);
  static const int LoginDBAgentRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentRsp, heartbeat_interval_),
  };
  LoginDBAgentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDBAgentRsp_descriptor_,
      LoginDBAgentRsp::default_instance_,
      LoginDBAgentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDBAgentRsp));
  DBAgentInfoReq_descriptor_ = file->message_type(4);
  static const int DBAgentInfoReq_offsets_[1] = {
  };
  DBAgentInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAgentInfoReq_descriptor_,
      DBAgentInfoReq::default_instance_,
      DBAgentInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAgentInfoReq));
  DBAgentInfoRsp_descriptor_ = file->message_type(5);
  static const int DBAgentInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, up_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, down_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_select_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_insert_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_update_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_delete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, client_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, queue_num_),
  };
  DBAgentInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAgentInfoRsp_descriptor_,
      DBAgentInfoRsp::default_instance_,
      DBAgentInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAgentInfoRsp));
  QueryDBAgentReq_descriptor_ = file->message_type(6);
  static const int QueryDBAgentReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, dbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, statement_),
  };
  QueryDBAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDBAgentReq_descriptor_,
      QueryDBAgentReq::default_instance_,
      QueryDBAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDBAgentReq));
  QueryDBAgentReq_ActoinType_descriptor_ = QueryDBAgentReq_descriptor_->enum_type(0);
  QueryDBAgentReq_DatabaseType_descriptor_ = QueryDBAgentReq_descriptor_->enum_type(1);
  QueryDBAgentRsp_descriptor_ = file->message_type(7);
  static const int QueryDBAgentRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, result_),
  };
  QueryDBAgentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDBAgentRsp_descriptor_,
      QueryDBAgentRsp::default_instance_,
      QueryDBAgentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDBAgentRsp));
  DBErrorRsp_descriptor_ = file->message_type(8);
  static const int DBErrorRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, what_),
  };
  DBErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBErrorRsp_descriptor_,
      DBErrorRsp::default_instance_,
      DBErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBErrorRsp));
  DBAgentErrorRsp_descriptor_ = file->message_type(9);
  static const int DBAgentErrorRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, sequence_),
  };
  DBAgentErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAgentErrorRsp_descriptor_,
      DBAgentErrorRsp::default_instance_,
      DBAgentErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAgentErrorRsp));
  RouterErrorRsp_descriptor_ = file->message_type(10);
  static const int RouterErrorRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterErrorRsp, what_),
  };
  RouterErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouterErrorRsp_descriptor_,
      RouterErrorRsp::default_instance_,
      RouterErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouterErrorRsp));
  LoginRouterReq_descriptor_ = file->message_type(11);
  static const int LoginRouterReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, child_id_),
  };
  LoginRouterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRouterReq_descriptor_,
      LoginRouterReq::default_instance_,
      LoginRouterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRouterReq));
  LoginRouterRsp_descriptor_ = file->message_type(12);
  static const int LoginRouterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterRsp, heartbeat_interval_),
  };
  LoginRouterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRouterRsp_descriptor_,
      LoginRouterRsp::default_instance_,
      LoginRouterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRouterRsp));
  RouterInfoReq_descriptor_ = file->message_type(13);
  static const int RouterInfoReq_offsets_[1] = {
  };
  RouterInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouterInfoReq_descriptor_,
      RouterInfoReq::default_instance_,
      RouterInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouterInfoReq));
  RouterInfoRsp_descriptor_ = file->message_type(14);
  static const int RouterInfoRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, up_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, down_volume_),
  };
  RouterInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouterInfoRsp_descriptor_,
      RouterInfoRsp::default_instance_,
      RouterInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouterInfoRsp));
  ForwardMessageReq_descriptor_ = file->message_type(15);
  static const int ForwardMessageReq_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageReq, dst_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageReq, dst_child_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageReq, message_length_),
  };
  ForwardMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardMessageReq_descriptor_,
      ForwardMessageReq::default_instance_,
      ForwardMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardMessageReq));
  ForwardMessageRsp_descriptor_ = file->message_type(16);
  static const int ForwardMessageRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageRsp, src_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageRsp, src_child_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageRsp, message_length_),
  };
  ForwardMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardMessageRsp_descriptor_,
      ForwardMessageRsp::default_instance_,
      ForwardMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardMessageRsp));
  BroadcastMessageReq_descriptor_ = file->message_type(17);
  static const int BroadcastMessageReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageReq, dst_lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageReq, message_length_),
  };
  BroadcastMessageReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastMessageReq_descriptor_,
      BroadcastMessageReq::default_instance_,
      BroadcastMessageReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastMessageReq));
  BroadcastMessageRsp_descriptor_ = file->message_type(18);
  static const int BroadcastMessageRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageRsp, src_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageRsp, src_child_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageRsp, message_length_),
  };
  BroadcastMessageRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastMessageRsp_descriptor_,
      BroadcastMessageRsp::default_instance_,
      BroadcastMessageRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastMessageRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastMessageRsp));
  ErrorCode_descriptor_ = file->enum_type(0);
  NodeType_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2finternal_2eprotocol_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PingReq_descriptor_, &PingReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PongRsp_descriptor_, &PongRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDBAgentReq_descriptor_, &LoginDBAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDBAgentRsp_descriptor_, &LoginDBAgentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAgentInfoReq_descriptor_, &DBAgentInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAgentInfoRsp_descriptor_, &DBAgentInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDBAgentReq_descriptor_, &QueryDBAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDBAgentRsp_descriptor_, &QueryDBAgentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBErrorRsp_descriptor_, &DBErrorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAgentErrorRsp_descriptor_, &DBAgentErrorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouterErrorRsp_descriptor_, &RouterErrorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRouterReq_descriptor_, &LoginRouterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRouterRsp_descriptor_, &LoginRouterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouterInfoReq_descriptor_, &RouterInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouterInfoRsp_descriptor_, &RouterInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardMessageReq_descriptor_, &ForwardMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardMessageRsp_descriptor_, &ForwardMessageRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastMessageReq_descriptor_, &BroadcastMessageReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastMessageRsp_descriptor_, &BroadcastMessageRsp::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2finternal_2eprotocol_2eproto() {
  delete PingReq::default_instance_;
  delete PingReq_reflection_;
  delete PongRsp::default_instance_;
  delete PongRsp_reflection_;
  delete LoginDBAgentReq::default_instance_;
  delete LoginDBAgentReq_reflection_;
  delete LoginDBAgentRsp::default_instance_;
  delete LoginDBAgentRsp_reflection_;
  delete DBAgentInfoReq::default_instance_;
  delete DBAgentInfoReq_reflection_;
  delete DBAgentInfoRsp::default_instance_;
  delete DBAgentInfoRsp_reflection_;
  delete QueryDBAgentReq::default_instance_;
  delete QueryDBAgentReq_reflection_;
  delete QueryDBAgentRsp::default_instance_;
  delete QueryDBAgentRsp_reflection_;
  delete DBErrorRsp::default_instance_;
  delete DBErrorRsp_reflection_;
  delete DBAgentErrorRsp::default_instance_;
  delete DBAgentErrorRsp_reflection_;
  delete RouterErrorRsp::default_instance_;
  delete RouterErrorRsp_reflection_;
  delete LoginRouterReq::default_instance_;
  delete LoginRouterReq_reflection_;
  delete LoginRouterRsp::default_instance_;
  delete LoginRouterRsp_reflection_;
  delete RouterInfoReq::default_instance_;
  delete RouterInfoReq_reflection_;
  delete RouterInfoRsp::default_instance_;
  delete RouterInfoRsp_reflection_;
  delete ForwardMessageReq::default_instance_;
  delete ForwardMessageReq_reflection_;
  delete ForwardMessageRsp::default_instance_;
  delete ForwardMessageRsp_reflection_;
  delete BroadcastMessageReq::default_instance_;
  delete BroadcastMessageReq_reflection_;
  delete BroadcastMessageRsp::default_instance_;
  delete BroadcastMessageRsp_reflection_;
}

void protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035proto/internal.protocol.proto\022\010interna"
    "l\"\t\n\007PingReq\"\t\n\007PongRsp\"\021\n\017LoginDBAgentR"
    "eq\"-\n\017LoginDBAgentRsp\022\032\n\022heartbeat_inter"
    "val\030\001 \002(\r\"\020\n\016DBAgentInfoReq\"\323\001\n\016DBAgentI"
    "nfoRsp\022\021\n\tup_volume\030\001 \002(\r\022\023\n\013down_volume"
    "\030\002 \002(\r\022\033\n\023handle_select_count\030\003 \002(\r\022\033\n\023h"
    "andle_insert_count\030\004 \002(\r\022\033\n\023handle_updat"
    "e_count\030\005 \002(\r\022\033\n\023handle_delete_count\030\006 \002"
    "(\r\022\022\n\nclient_num\030\007 \002(\r\022\021\n\tqueue_num\030\010 \002("
    "\r\"\236\002\n\017QueryDBAgentReq\022\020\n\010sequence\030\001 \002(\r\022"
    "6\n\006dbtype\030\002 \002(\0162&.internal.QueryDBAgentR"
    "eq.DatabaseType\0224\n\006action\030\003 \002(\0162$.intern"
    "al.QueryDBAgentReq.ActoinType\022\016\n\006dbname\030"
    "\004 \002(\t\022\021\n\tstatement\030\005 \001(\t\"@\n\nActoinType\022\013"
    "\n\007kSelect\020\001\022\013\n\007kInsert\020\002\022\013\n\007kUpdate\020\003\022\013\n"
    "\007kDelete\020\004\"&\n\014DatabaseType\022\n\n\006kRedis\020\001\022\n"
    "\n\006kMySQL\020\002\"3\n\017QueryDBAgentRsp\022\020\n\010sequenc"
    "e\030\001 \002(\r\022\016\n\006result\030\002 \001(\t\"@\n\nDBErrorRsp\022\020\n"
    "\010sequence\030\001 \002(\r\022\022\n\nerror_code\030\002 \002(\005\022\014\n\004w"
    "hat\030\003 \001(\t\"L\n\017DBAgentErrorRsp\022\'\n\nerror_co"
    "de\030\001 \002(\0162\023.internal.ErrorCode\022\020\n\010sequenc"
    "e\030\002 \001(\r\"G\n\016RouterErrorRsp\022\'\n\nerror_code\030"
    "\001 \002(\0162\023.internal.ErrorCode\022\014\n\004what\030\002 \001(\t"
    "\"G\n\016LoginRouterReq\022 \n\004type\030\001 \002(\0162\022.inter"
    "nal.NodeType\022\023\n\010child_id\030\002 \001(\r:\0011\",\n\016Log"
    "inRouterRsp\022\032\n\022heartbeat_interval\030\001 \002(\r\""
    "\017\n\rRouterInfoReq\"7\n\rRouterInfoRsp\022\021\n\tup_"
    "volume\030\001 \002(\r\022\023\n\013down_volume\030\002 \002(\r\"j\n\021For"
    "wardMessageReq\022$\n\010dst_type\030\001 \002(\0162\022.inter"
    "nal.NodeType\022\027\n\014dst_child_id\030\002 \001(\r:\0011\022\026\n"
    "\016message_length\030\003 \002(\r\"j\n\021ForwardMessageR"
    "sp\022$\n\010src_type\030\001 \002(\0162\022.internal.NodeType"
    "\022\027\n\014src_child_id\030\002 \001(\r:\0011\022\026\n\016message_len"
    "gth\030\003 \002(\r\"T\n\023BroadcastMessageReq\022%\n\tdst_"
    "lists\030\001 \003(\0162\022.internal.NodeType\022\026\n\016messa"
    "ge_length\030\003 \002(\r\"l\n\023BroadcastMessageRsp\022$"
    "\n\010src_type\030\001 \002(\0162\022.internal.NodeType\022\027\n\014"
    "src_child_id\030\002 \001(\r:\0011\022\026\n\016message_length\030"
    "\003 \002(\r*\376\001\n\tErrorCode\022\020\n\014kNotLoggedIn\020\001\022\017\n"
    "\013kDisconnect\020\002\022\021\n\rkNotConnected\020\003\022\024\n\020kIn"
    "validProtocol\020\004\022\025\n\021kInvalidOperation\020\005\022\025"
    "\n\021kNotFoundDatabase\020\006\022\032\n\026kResourceInsuff"
    "iciency\020\007\022\033\n\027kDestinationUnreachable\020\010\022\024"
    "\n\020kInvalidNodeType\020\t\022\020\n\014kRepeatLogin\020\n\022\026"
    "\n\022kInvalidDataPacket\020\013*C\n\010NodeType\022\020\n\014kL"
    "oginServer\020\001\022\020\n\014kProxyServer\020\002\022\023\n\017kMainL"
    "ogicSever\020\003", 1851);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/internal.protocol.proto", &protobuf_RegisterTypes);
  PingReq::default_instance_ = new PingReq();
  PongRsp::default_instance_ = new PongRsp();
  LoginDBAgentReq::default_instance_ = new LoginDBAgentReq();
  LoginDBAgentRsp::default_instance_ = new LoginDBAgentRsp();
  DBAgentInfoReq::default_instance_ = new DBAgentInfoReq();
  DBAgentInfoRsp::default_instance_ = new DBAgentInfoRsp();
  QueryDBAgentReq::default_instance_ = new QueryDBAgentReq();
  QueryDBAgentRsp::default_instance_ = new QueryDBAgentRsp();
  DBErrorRsp::default_instance_ = new DBErrorRsp();
  DBAgentErrorRsp::default_instance_ = new DBAgentErrorRsp();
  RouterErrorRsp::default_instance_ = new RouterErrorRsp();
  LoginRouterReq::default_instance_ = new LoginRouterReq();
  LoginRouterRsp::default_instance_ = new LoginRouterRsp();
  RouterInfoReq::default_instance_ = new RouterInfoReq();
  RouterInfoRsp::default_instance_ = new RouterInfoRsp();
  ForwardMessageReq::default_instance_ = new ForwardMessageReq();
  ForwardMessageRsp::default_instance_ = new ForwardMessageRsp();
  BroadcastMessageReq::default_instance_ = new BroadcastMessageReq();
  BroadcastMessageRsp::default_instance_ = new BroadcastMessageRsp();
  PingReq::default_instance_->InitAsDefaultInstance();
  PongRsp::default_instance_->InitAsDefaultInstance();
  LoginDBAgentReq::default_instance_->InitAsDefaultInstance();
  LoginDBAgentRsp::default_instance_->InitAsDefaultInstance();
  DBAgentInfoReq::default_instance_->InitAsDefaultInstance();
  DBAgentInfoRsp::default_instance_->InitAsDefaultInstance();
  QueryDBAgentReq::default_instance_->InitAsDefaultInstance();
  QueryDBAgentRsp::default_instance_->InitAsDefaultInstance();
  DBErrorRsp::default_instance_->InitAsDefaultInstance();
  DBAgentErrorRsp::default_instance_->InitAsDefaultInstance();
  RouterErrorRsp::default_instance_->InitAsDefaultInstance();
  LoginRouterReq::default_instance_->InitAsDefaultInstance();
  LoginRouterRsp::default_instance_->InitAsDefaultInstance();
  RouterInfoReq::default_instance_->InitAsDefaultInstance();
  RouterInfoRsp::default_instance_->InitAsDefaultInstance();
  ForwardMessageReq::default_instance_->InitAsDefaultInstance();
  ForwardMessageRsp::default_instance_->InitAsDefaultInstance();
  BroadcastMessageReq::default_instance_->InitAsDefaultInstance();
  BroadcastMessageRsp::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2finternal_2eprotocol_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2finternal_2eprotocol_2eproto {
  StaticDescriptorInitializer_proto_2finternal_2eprotocol_2eproto() {
    protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  }
} static_descriptor_initializer_proto_2finternal_2eprotocol_2eproto_;
const ::google::protobuf::EnumDescriptor* ErrorCode_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ErrorCode_descriptor_;
}
bool ErrorCode_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeType_descriptor_;
}
bool NodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PingReq::PingReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.PingReq)
}

void PingReq::InitAsDefaultInstance() {
}

PingReq::PingReq(const PingReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.PingReq)
}

void PingReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PingReq::~PingReq() {
  // @@protoc_insertion_point(destructor:internal.PingReq)
  SharedDtor();
}

void PingReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PingReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PingReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PingReq_descriptor_;
}

const PingReq& PingReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

PingReq* PingReq::default_instance_ = NULL;

PingReq* PingReq::New() const {
  return new PingReq;
}

void PingReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PingReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.PingReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.PingReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.PingReq)
  return false;
#undef DO_
}

void PingReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.PingReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.PingReq)
}

::google::protobuf::uint8* PingReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.PingReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.PingReq)
  return target;
}

int PingReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PingReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PingReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PingReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PingReq::MergeFrom(const PingReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PingReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PingReq::CopyFrom(const PingReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PingReq::IsInitialized() const {

  return true;
}

void PingReq::Swap(PingReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PingReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PingReq_descriptor_;
  metadata.reflection = PingReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

PongRsp::PongRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.PongRsp)
}

void PongRsp::InitAsDefaultInstance() {
}

PongRsp::PongRsp(const PongRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.PongRsp)
}

void PongRsp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PongRsp::~PongRsp() {
  // @@protoc_insertion_point(destructor:internal.PongRsp)
  SharedDtor();
}

void PongRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PongRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PongRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PongRsp_descriptor_;
}

const PongRsp& PongRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

PongRsp* PongRsp::default_instance_ = NULL;

PongRsp* PongRsp::New() const {
  return new PongRsp;
}

void PongRsp::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PongRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.PongRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.PongRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.PongRsp)
  return false;
#undef DO_
}

void PongRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.PongRsp)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.PongRsp)
}

::google::protobuf::uint8* PongRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.PongRsp)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.PongRsp)
  return target;
}

int PongRsp::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PongRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PongRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PongRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PongRsp::MergeFrom(const PongRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PongRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PongRsp::CopyFrom(const PongRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PongRsp::IsInitialized() const {

  return true;
}

void PongRsp::Swap(PongRsp* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PongRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PongRsp_descriptor_;
  metadata.reflection = PongRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginDBAgentReq::LoginDBAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.LoginDBAgentReq)
}

void LoginDBAgentReq::InitAsDefaultInstance() {
}

LoginDBAgentReq::LoginDBAgentReq(const LoginDBAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.LoginDBAgentReq)
}

void LoginDBAgentReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDBAgentReq::~LoginDBAgentReq() {
  // @@protoc_insertion_point(destructor:internal.LoginDBAgentReq)
  SharedDtor();
}

void LoginDBAgentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginDBAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDBAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDBAgentReq_descriptor_;
}

const LoginDBAgentReq& LoginDBAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

LoginDBAgentReq* LoginDBAgentReq::default_instance_ = NULL;

LoginDBAgentReq* LoginDBAgentReq::New() const {
  return new LoginDBAgentReq;
}

void LoginDBAgentReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDBAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.LoginDBAgentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.LoginDBAgentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.LoginDBAgentReq)
  return false;
#undef DO_
}

void LoginDBAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.LoginDBAgentReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.LoginDBAgentReq)
}

::google::protobuf::uint8* LoginDBAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.LoginDBAgentReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.LoginDBAgentReq)
  return target;
}

int LoginDBAgentReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDBAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDBAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDBAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDBAgentReq::MergeFrom(const LoginDBAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDBAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDBAgentReq::CopyFrom(const LoginDBAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDBAgentReq::IsInitialized() const {

  return true;
}

void LoginDBAgentReq::Swap(LoginDBAgentReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDBAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDBAgentReq_descriptor_;
  metadata.reflection = LoginDBAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginDBAgentRsp::kHeartbeatIntervalFieldNumber;
#endif  // !_MSC_VER

LoginDBAgentRsp::LoginDBAgentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.LoginDBAgentRsp)
}

void LoginDBAgentRsp::InitAsDefaultInstance() {
}

LoginDBAgentRsp::LoginDBAgentRsp(const LoginDBAgentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.LoginDBAgentRsp)
}

void LoginDBAgentRsp::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDBAgentRsp::~LoginDBAgentRsp() {
  // @@protoc_insertion_point(destructor:internal.LoginDBAgentRsp)
  SharedDtor();
}

void LoginDBAgentRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginDBAgentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDBAgentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDBAgentRsp_descriptor_;
}

const LoginDBAgentRsp& LoginDBAgentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

LoginDBAgentRsp* LoginDBAgentRsp::default_instance_ = NULL;

LoginDBAgentRsp* LoginDBAgentRsp::New() const {
  return new LoginDBAgentRsp;
}

void LoginDBAgentRsp::Clear() {
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDBAgentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.LoginDBAgentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heartbeat_interval = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_)));
          set_has_heartbeat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.LoginDBAgentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.LoginDBAgentRsp)
  return false;
#undef DO_
}

void LoginDBAgentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.LoginDBAgentRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heartbeat_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.LoginDBAgentRsp)
}

::google::protobuf::uint8* LoginDBAgentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.LoginDBAgentRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heartbeat_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.LoginDBAgentRsp)
  return target;
}

int LoginDBAgentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heartbeat_interval = 1;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDBAgentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDBAgentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDBAgentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDBAgentRsp::MergeFrom(const LoginDBAgentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_interval()) {
      set_heartbeat_interval(from.heartbeat_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDBAgentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDBAgentRsp::CopyFrom(const LoginDBAgentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDBAgentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginDBAgentRsp::Swap(LoginDBAgentRsp* other) {
  if (other != this) {
    std::swap(heartbeat_interval_, other->heartbeat_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDBAgentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDBAgentRsp_descriptor_;
  metadata.reflection = LoginDBAgentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DBAgentInfoReq::DBAgentInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.DBAgentInfoReq)
}

void DBAgentInfoReq::InitAsDefaultInstance() {
}

DBAgentInfoReq::DBAgentInfoReq(const DBAgentInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.DBAgentInfoReq)
}

void DBAgentInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAgentInfoReq::~DBAgentInfoReq() {
  // @@protoc_insertion_point(destructor:internal.DBAgentInfoReq)
  SharedDtor();
}

void DBAgentInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAgentInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAgentInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAgentInfoReq_descriptor_;
}

const DBAgentInfoReq& DBAgentInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

DBAgentInfoReq* DBAgentInfoReq::default_instance_ = NULL;

DBAgentInfoReq* DBAgentInfoReq::New() const {
  return new DBAgentInfoReq;
}

void DBAgentInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAgentInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.DBAgentInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.DBAgentInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.DBAgentInfoReq)
  return false;
#undef DO_
}

void DBAgentInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.DBAgentInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.DBAgentInfoReq)
}

::google::protobuf::uint8* DBAgentInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.DBAgentInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.DBAgentInfoReq)
  return target;
}

int DBAgentInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAgentInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAgentInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAgentInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAgentInfoReq::MergeFrom(const DBAgentInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAgentInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAgentInfoReq::CopyFrom(const DBAgentInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAgentInfoReq::IsInitialized() const {

  return true;
}

void DBAgentInfoReq::Swap(DBAgentInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAgentInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAgentInfoReq_descriptor_;
  metadata.reflection = DBAgentInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAgentInfoRsp::kUpVolumeFieldNumber;
const int DBAgentInfoRsp::kDownVolumeFieldNumber;
const int DBAgentInfoRsp::kHandleSelectCountFieldNumber;
const int DBAgentInfoRsp::kHandleInsertCountFieldNumber;
const int DBAgentInfoRsp::kHandleUpdateCountFieldNumber;
const int DBAgentInfoRsp::kHandleDeleteCountFieldNumber;
const int DBAgentInfoRsp::kClientNumFieldNumber;
const int DBAgentInfoRsp::kQueueNumFieldNumber;
#endif  // !_MSC_VER

DBAgentInfoRsp::DBAgentInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.DBAgentInfoRsp)
}

void DBAgentInfoRsp::InitAsDefaultInstance() {
}

DBAgentInfoRsp::DBAgentInfoRsp(const DBAgentInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.DBAgentInfoRsp)
}

void DBAgentInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  up_volume_ = 0u;
  down_volume_ = 0u;
  handle_select_count_ = 0u;
  handle_insert_count_ = 0u;
  handle_update_count_ = 0u;
  handle_delete_count_ = 0u;
  client_num_ = 0u;
  queue_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAgentInfoRsp::~DBAgentInfoRsp() {
  // @@protoc_insertion_point(destructor:internal.DBAgentInfoRsp)
  SharedDtor();
}

void DBAgentInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAgentInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAgentInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAgentInfoRsp_descriptor_;
}

const DBAgentInfoRsp& DBAgentInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

DBAgentInfoRsp* DBAgentInfoRsp::default_instance_ = NULL;

DBAgentInfoRsp* DBAgentInfoRsp::New() const {
  return new DBAgentInfoRsp;
}

void DBAgentInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBAgentInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(up_volume_, queue_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAgentInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.DBAgentInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 up_volume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_volume_)));
          set_has_up_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down_volume;
        break;
      }

      // required uint32 down_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_down_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_volume_)));
          set_has_down_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_select_count;
        break;
      }

      // required uint32 handle_select_count = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_select_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_select_count_)));
          set_has_handle_select_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_handle_insert_count;
        break;
      }

      // required uint32 handle_insert_count = 4;
      case 4: {
        if (tag == 32) {
         parse_handle_insert_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_insert_count_)));
          set_has_handle_insert_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_handle_update_count;
        break;
      }

      // required uint32 handle_update_count = 5;
      case 5: {
        if (tag == 40) {
         parse_handle_update_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_update_count_)));
          set_has_handle_update_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_handle_delete_count;
        break;
      }

      // required uint32 handle_delete_count = 6;
      case 6: {
        if (tag == 48) {
         parse_handle_delete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_delete_count_)));
          set_has_handle_delete_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_client_num;
        break;
      }

      // required uint32 client_num = 7;
      case 7: {
        if (tag == 56) {
         parse_client_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_num_)));
          set_has_client_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_queue_num;
        break;
      }

      // required uint32 queue_num = 8;
      case 8: {
        if (tag == 64) {
         parse_queue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_num_)));
          set_has_queue_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.DBAgentInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.DBAgentInfoRsp)
  return false;
#undef DO_
}

void DBAgentInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.DBAgentInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->up_volume(), output);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->down_volume(), output);
  }

  // required uint32 handle_select_count = 3;
  if (has_handle_select_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handle_select_count(), output);
  }

  // required uint32 handle_insert_count = 4;
  if (has_handle_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->handle_insert_count(), output);
  }

  // required uint32 handle_update_count = 5;
  if (has_handle_update_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->handle_update_count(), output);
  }

  // required uint32 handle_delete_count = 6;
  if (has_handle_delete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->handle_delete_count(), output);
  }

  // required uint32 client_num = 7;
  if (has_client_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->client_num(), output);
  }

  // required uint32 queue_num = 8;
  if (has_queue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->queue_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.DBAgentInfoRsp)
}

::google::protobuf::uint8* DBAgentInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.DBAgentInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->up_volume(), target);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->down_volume(), target);
  }

  // required uint32 handle_select_count = 3;
  if (has_handle_select_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->handle_select_count(), target);
  }

  // required uint32 handle_insert_count = 4;
  if (has_handle_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->handle_insert_count(), target);
  }

  // required uint32 handle_update_count = 5;
  if (has_handle_update_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->handle_update_count(), target);
  }

  // required uint32 handle_delete_count = 6;
  if (has_handle_delete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->handle_delete_count(), target);
  }

  // required uint32 client_num = 7;
  if (has_client_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->client_num(), target);
  }

  // required uint32 queue_num = 8;
  if (has_queue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->queue_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.DBAgentInfoRsp)
  return target;
}

int DBAgentInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 up_volume = 1;
    if (has_up_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_volume());
    }

    // required uint32 down_volume = 2;
    if (has_down_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_volume());
    }

    // required uint32 handle_select_count = 3;
    if (has_handle_select_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_select_count());
    }

    // required uint32 handle_insert_count = 4;
    if (has_handle_insert_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_insert_count());
    }

    // required uint32 handle_update_count = 5;
    if (has_handle_update_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_update_count());
    }

    // required uint32 handle_delete_count = 6;
    if (has_handle_delete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_delete_count());
    }

    // required uint32 client_num = 7;
    if (has_client_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_num());
    }

    // required uint32 queue_num = 8;
    if (has_queue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAgentInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAgentInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAgentInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAgentInfoRsp::MergeFrom(const DBAgentInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_up_volume()) {
      set_up_volume(from.up_volume());
    }
    if (from.has_down_volume()) {
      set_down_volume(from.down_volume());
    }
    if (from.has_handle_select_count()) {
      set_handle_select_count(from.handle_select_count());
    }
    if (from.has_handle_insert_count()) {
      set_handle_insert_count(from.handle_insert_count());
    }
    if (from.has_handle_update_count()) {
      set_handle_update_count(from.handle_update_count());
    }
    if (from.has_handle_delete_count()) {
      set_handle_delete_count(from.handle_delete_count());
    }
    if (from.has_client_num()) {
      set_client_num(from.client_num());
    }
    if (from.has_queue_num()) {
      set_queue_num(from.queue_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAgentInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAgentInfoRsp::CopyFrom(const DBAgentInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAgentInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void DBAgentInfoRsp::Swap(DBAgentInfoRsp* other) {
  if (other != this) {
    std::swap(up_volume_, other->up_volume_);
    std::swap(down_volume_, other->down_volume_);
    std::swap(handle_select_count_, other->handle_select_count_);
    std::swap(handle_insert_count_, other->handle_insert_count_);
    std::swap(handle_update_count_, other->handle_update_count_);
    std::swap(handle_delete_count_, other->handle_delete_count_);
    std::swap(client_num_, other->client_num_);
    std::swap(queue_num_, other->queue_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAgentInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAgentInfoRsp_descriptor_;
  metadata.reflection = DBAgentInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_ActoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentReq_ActoinType_descriptor_;
}
bool QueryDBAgentReq_ActoinType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kSelect;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kInsert;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kUpdate;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kDelete;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::ActoinType_MIN;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::ActoinType_MAX;
const int QueryDBAgentReq::ActoinType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_DatabaseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentReq_DatabaseType_descriptor_;
}
bool QueryDBAgentReq_DatabaseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::kRedis;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::kMySQL;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::DatabaseType_MIN;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::DatabaseType_MAX;
const int QueryDBAgentReq::DatabaseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QueryDBAgentReq::kSequenceFieldNumber;
const int QueryDBAgentReq::kDbtypeFieldNumber;
const int QueryDBAgentReq::kActionFieldNumber;
const int QueryDBAgentReq::kDbnameFieldNumber;
const int QueryDBAgentReq::kStatementFieldNumber;
#endif  // !_MSC_VER

QueryDBAgentReq::QueryDBAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.QueryDBAgentReq)
}

void QueryDBAgentReq::InitAsDefaultInstance() {
}

QueryDBAgentReq::QueryDBAgentReq(const QueryDBAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.QueryDBAgentReq)
}

void QueryDBAgentReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  dbtype_ = 1;
  action_ = 1;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDBAgentReq::~QueryDBAgentReq() {
  // @@protoc_insertion_point(destructor:internal.QueryDBAgentReq)
  SharedDtor();
}

void QueryDBAgentReq::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statement_;
  }
  if (this != default_instance_) {
  }
}

void QueryDBAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDBAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentReq_descriptor_;
}

const QueryDBAgentReq& QueryDBAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

QueryDBAgentReq* QueryDBAgentReq::default_instance_ = NULL;

QueryDBAgentReq* QueryDBAgentReq::New() const {
  return new QueryDBAgentReq;
}

void QueryDBAgentReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    sequence_ = 0u;
    dbtype_ = 1;
    action_ = 1;
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbname_->clear();
      }
    }
    if (has_statement()) {
      if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDBAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.QueryDBAgentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbtype;
        break;
      }

      // required .internal.QueryDBAgentReq.DatabaseType dbtype = 2;
      case 2: {
        if (tag == 16) {
         parse_dbtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::QueryDBAgentReq_DatabaseType_IsValid(value)) {
            set_dbtype(static_cast< ::internal::QueryDBAgentReq_DatabaseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // required .internal.QueryDBAgentReq.ActoinType action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::QueryDBAgentReq_ActoinType_IsValid(value)) {
            set_action(static_cast< ::internal::QueryDBAgentReq_ActoinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dbname;
        break;
      }

      // required string dbname = 4;
      case 4: {
        if (tag == 34) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_statement;
        break;
      }

      // optional string statement = 5;
      case 5: {
        if (tag == 42) {
         parse_statement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statement().data(), this->statement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statement");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.QueryDBAgentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.QueryDBAgentReq)
  return false;
#undef DO_
}

void QueryDBAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.QueryDBAgentReq)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required .internal.QueryDBAgentReq.DatabaseType dbtype = 2;
  if (has_dbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dbtype(), output);
  }

  // required .internal.QueryDBAgentReq.ActoinType action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // required string dbname = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dbname(), output);
  }

  // optional string statement = 5;
  if (has_statement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statement().data(), this->statement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->statement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.QueryDBAgentReq)
}

::google::protobuf::uint8* QueryDBAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.QueryDBAgentReq)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required .internal.QueryDBAgentReq.DatabaseType dbtype = 2;
  if (has_dbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dbtype(), target);
  }

  // required .internal.QueryDBAgentReq.ActoinType action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // required string dbname = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbname(), target);
  }

  // optional string statement = 5;
  if (has_statement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statement().data(), this->statement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->statement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.QueryDBAgentReq)
  return target;
}

int QueryDBAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required .internal.QueryDBAgentReq.DatabaseType dbtype = 2;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dbtype());
    }

    // required .internal.QueryDBAgentReq.ActoinType action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required string dbname = 4;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string statement = 5;
    if (has_statement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDBAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDBAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDBAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDBAgentReq::MergeFrom(const QueryDBAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_dbtype()) {
      set_dbtype(from.dbtype());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_statement()) {
      set_statement(from.statement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDBAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDBAgentReq::CopyFrom(const QueryDBAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDBAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QueryDBAgentReq::Swap(QueryDBAgentReq* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(dbtype_, other->dbtype_);
    std::swap(action_, other->action_);
    std::swap(dbname_, other->dbname_);
    std::swap(statement_, other->statement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDBAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDBAgentReq_descriptor_;
  metadata.reflection = QueryDBAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDBAgentRsp::kSequenceFieldNumber;
const int QueryDBAgentRsp::kResultFieldNumber;
#endif  // !_MSC_VER

QueryDBAgentRsp::QueryDBAgentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.QueryDBAgentRsp)
}

void QueryDBAgentRsp::InitAsDefaultInstance() {
}

QueryDBAgentRsp::QueryDBAgentRsp(const QueryDBAgentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.QueryDBAgentRsp)
}

void QueryDBAgentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDBAgentRsp::~QueryDBAgentRsp() {
  // @@protoc_insertion_point(destructor:internal.QueryDBAgentRsp)
  SharedDtor();
}

void QueryDBAgentRsp::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void QueryDBAgentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDBAgentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentRsp_descriptor_;
}

const QueryDBAgentRsp& QueryDBAgentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

QueryDBAgentRsp* QueryDBAgentRsp::default_instance_ = NULL;

QueryDBAgentRsp* QueryDBAgentRsp::New() const {
  return new QueryDBAgentRsp;
}

void QueryDBAgentRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sequence_ = 0u;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDBAgentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.QueryDBAgentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional string result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_result()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->result().data(), this->result().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "result");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.QueryDBAgentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.QueryDBAgentRsp)
  return false;
#undef DO_
}

void QueryDBAgentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.QueryDBAgentRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // optional string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.QueryDBAgentRsp)
}

::google::protobuf::uint8* QueryDBAgentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.QueryDBAgentRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // optional string result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->result().data(), this->result().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "result");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.QueryDBAgentRsp)
  return target;
}

int QueryDBAgentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional string result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDBAgentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDBAgentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDBAgentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDBAgentRsp::MergeFrom(const QueryDBAgentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDBAgentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDBAgentRsp::CopyFrom(const QueryDBAgentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDBAgentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryDBAgentRsp::Swap(QueryDBAgentRsp* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDBAgentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDBAgentRsp_descriptor_;
  metadata.reflection = QueryDBAgentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBErrorRsp::kSequenceFieldNumber;
const int DBErrorRsp::kErrorCodeFieldNumber;
const int DBErrorRsp::kWhatFieldNumber;
#endif  // !_MSC_VER

DBErrorRsp::DBErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.DBErrorRsp)
}

void DBErrorRsp::InitAsDefaultInstance() {
}

DBErrorRsp::DBErrorRsp(const DBErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.DBErrorRsp)
}

void DBErrorRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  error_code_ = 0;
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBErrorRsp::~DBErrorRsp() {
  // @@protoc_insertion_point(destructor:internal.DBErrorRsp)
  SharedDtor();
}

void DBErrorRsp::SharedDtor() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void DBErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBErrorRsp_descriptor_;
}

const DBErrorRsp& DBErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

DBErrorRsp* DBErrorRsp::default_instance_ = NULL;

DBErrorRsp* DBErrorRsp::New() const {
  return new DBErrorRsp;
}

void DBErrorRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBErrorRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sequence_, error_code_);
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.DBErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_what;
        break;
      }

      // optional string what = 3;
      case 3: {
        if (tag == 26) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.DBErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.DBErrorRsp)
  return false;
#undef DO_
}

void DBErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.DBErrorRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.DBErrorRsp)
}

::google::protobuf::uint8* DBErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.DBErrorRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.DBErrorRsp)
  return target;
}

int DBErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string what = 3;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBErrorRsp::MergeFrom(const DBErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBErrorRsp::CopyFrom(const DBErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBErrorRsp::Swap(DBErrorRsp* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(error_code_, other->error_code_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBErrorRsp_descriptor_;
  metadata.reflection = DBErrorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAgentErrorRsp::kErrorCodeFieldNumber;
const int DBAgentErrorRsp::kSequenceFieldNumber;
#endif  // !_MSC_VER

DBAgentErrorRsp::DBAgentErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.DBAgentErrorRsp)
}

void DBAgentErrorRsp::InitAsDefaultInstance() {
}

DBAgentErrorRsp::DBAgentErrorRsp(const DBAgentErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.DBAgentErrorRsp)
}

void DBAgentErrorRsp::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 1;
  sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAgentErrorRsp::~DBAgentErrorRsp() {
  // @@protoc_insertion_point(destructor:internal.DBAgentErrorRsp)
  SharedDtor();
}

void DBAgentErrorRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAgentErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAgentErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAgentErrorRsp_descriptor_;
}

const DBAgentErrorRsp& DBAgentErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

DBAgentErrorRsp* DBAgentErrorRsp::default_instance_ = NULL;

DBAgentErrorRsp* DBAgentErrorRsp::New() const {
  return new DBAgentErrorRsp;
}

void DBAgentErrorRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_code_ = 1;
    sequence_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAgentErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.DBAgentErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::internal::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.DBAgentErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.DBAgentErrorRsp)
  return false;
#undef DO_
}

void DBAgentErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.DBAgentErrorRsp)
  // required .internal.ErrorCode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.DBAgentErrorRsp)
}

::google::protobuf::uint8* DBAgentErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.DBAgentErrorRsp)
  // required .internal.ErrorCode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.DBAgentErrorRsp)
  return target;
}

int DBAgentErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAgentErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAgentErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAgentErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAgentErrorRsp::MergeFrom(const DBAgentErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAgentErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAgentErrorRsp::CopyFrom(const DBAgentErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAgentErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DBAgentErrorRsp::Swap(DBAgentErrorRsp* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAgentErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAgentErrorRsp_descriptor_;
  metadata.reflection = DBAgentErrorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouterErrorRsp::kErrorCodeFieldNumber;
const int RouterErrorRsp::kWhatFieldNumber;
#endif  // !_MSC_VER

RouterErrorRsp::RouterErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.RouterErrorRsp)
}

void RouterErrorRsp::InitAsDefaultInstance() {
}

RouterErrorRsp::RouterErrorRsp(const RouterErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.RouterErrorRsp)
}

void RouterErrorRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  error_code_ = 1;
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterErrorRsp::~RouterErrorRsp() {
  // @@protoc_insertion_point(destructor:internal.RouterErrorRsp)
  SharedDtor();
}

void RouterErrorRsp::SharedDtor() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void RouterErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterErrorRsp_descriptor_;
}

const RouterErrorRsp& RouterErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

RouterErrorRsp* RouterErrorRsp::default_instance_ = NULL;

RouterErrorRsp* RouterErrorRsp::New() const {
  return new RouterErrorRsp;
}

void RouterErrorRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_code_ = 1;
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouterErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.RouterErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::internal::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_what;
        break;
      }

      // optional string what = 2;
      case 2: {
        if (tag == 18) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.RouterErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.RouterErrorRsp)
  return false;
#undef DO_
}

void RouterErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.RouterErrorRsp)
  // required .internal.ErrorCode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional string what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.RouterErrorRsp)
}

::google::protobuf::uint8* RouterErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.RouterErrorRsp)
  // required .internal.ErrorCode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional string what = 2;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.RouterErrorRsp)
  return target;
}

int RouterErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional string what = 2;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouterErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouterErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouterErrorRsp::MergeFrom(const RouterErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouterErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterErrorRsp::CopyFrom(const RouterErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RouterErrorRsp::Swap(RouterErrorRsp* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouterErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterErrorRsp_descriptor_;
  metadata.reflection = RouterErrorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRouterReq::kTypeFieldNumber;
const int LoginRouterReq::kChildIdFieldNumber;
#endif  // !_MSC_VER

LoginRouterReq::LoginRouterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.LoginRouterReq)
}

void LoginRouterReq::InitAsDefaultInstance() {
}

LoginRouterReq::LoginRouterReq(const LoginRouterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.LoginRouterReq)
}

void LoginRouterReq::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  child_id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRouterReq::~LoginRouterReq() {
  // @@protoc_insertion_point(destructor:internal.LoginRouterReq)
  SharedDtor();
}

void LoginRouterReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRouterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRouterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRouterReq_descriptor_;
}

const LoginRouterReq& LoginRouterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

LoginRouterReq* LoginRouterReq::default_instance_ = NULL;

LoginRouterReq* LoginRouterReq::New() const {
  return new LoginRouterReq;
}

void LoginRouterReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    child_id_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRouterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.LoginRouterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.NodeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::NodeType_IsValid(value)) {
            set_type(static_cast< ::internal::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_child_id;
        break;
      }

      // optional uint32 child_id = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.LoginRouterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.LoginRouterReq)
  return false;
#undef DO_
}

void LoginRouterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.LoginRouterReq)
  // required .internal.NodeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 child_id = 2 [default = 1];
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->child_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.LoginRouterReq)
}

::google::protobuf::uint8* LoginRouterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.LoginRouterReq)
  // required .internal.NodeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 child_id = 2 [default = 1];
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->child_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.LoginRouterReq)
  return target;
}

int LoginRouterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.NodeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 child_id = 2 [default = 1];
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRouterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRouterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRouterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRouterReq::MergeFrom(const LoginRouterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRouterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRouterReq::CopyFrom(const LoginRouterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRouterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRouterReq::Swap(LoginRouterReq* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(child_id_, other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRouterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRouterReq_descriptor_;
  metadata.reflection = LoginRouterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRouterRsp::kHeartbeatIntervalFieldNumber;
#endif  // !_MSC_VER

LoginRouterRsp::LoginRouterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.LoginRouterRsp)
}

void LoginRouterRsp::InitAsDefaultInstance() {
}

LoginRouterRsp::LoginRouterRsp(const LoginRouterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.LoginRouterRsp)
}

void LoginRouterRsp::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRouterRsp::~LoginRouterRsp() {
  // @@protoc_insertion_point(destructor:internal.LoginRouterRsp)
  SharedDtor();
}

void LoginRouterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRouterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRouterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRouterRsp_descriptor_;
}

const LoginRouterRsp& LoginRouterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

LoginRouterRsp* LoginRouterRsp::default_instance_ = NULL;

LoginRouterRsp* LoginRouterRsp::New() const {
  return new LoginRouterRsp;
}

void LoginRouterRsp::Clear() {
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRouterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.LoginRouterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heartbeat_interval = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_)));
          set_has_heartbeat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.LoginRouterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.LoginRouterRsp)
  return false;
#undef DO_
}

void LoginRouterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.LoginRouterRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heartbeat_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.LoginRouterRsp)
}

::google::protobuf::uint8* LoginRouterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.LoginRouterRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heartbeat_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.LoginRouterRsp)
  return target;
}

int LoginRouterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heartbeat_interval = 1;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRouterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRouterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRouterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRouterRsp::MergeFrom(const LoginRouterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_interval()) {
      set_heartbeat_interval(from.heartbeat_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRouterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRouterRsp::CopyFrom(const LoginRouterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRouterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRouterRsp::Swap(LoginRouterRsp* other) {
  if (other != this) {
    std::swap(heartbeat_interval_, other->heartbeat_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRouterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRouterRsp_descriptor_;
  metadata.reflection = LoginRouterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RouterInfoReq::RouterInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.RouterInfoReq)
}

void RouterInfoReq::InitAsDefaultInstance() {
}

RouterInfoReq::RouterInfoReq(const RouterInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.RouterInfoReq)
}

void RouterInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterInfoReq::~RouterInfoReq() {
  // @@protoc_insertion_point(destructor:internal.RouterInfoReq)
  SharedDtor();
}

void RouterInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouterInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterInfoReq_descriptor_;
}

const RouterInfoReq& RouterInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

RouterInfoReq* RouterInfoReq::default_instance_ = NULL;

RouterInfoReq* RouterInfoReq::New() const {
  return new RouterInfoReq;
}

void RouterInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouterInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.RouterInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:internal.RouterInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.RouterInfoReq)
  return false;
#undef DO_
}

void RouterInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.RouterInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.RouterInfoReq)
}

::google::protobuf::uint8* RouterInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.RouterInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.RouterInfoReq)
  return target;
}

int RouterInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouterInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouterInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouterInfoReq::MergeFrom(const RouterInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouterInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterInfoReq::CopyFrom(const RouterInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoReq::IsInitialized() const {

  return true;
}

void RouterInfoReq::Swap(RouterInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouterInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterInfoReq_descriptor_;
  metadata.reflection = RouterInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouterInfoRsp::kUpVolumeFieldNumber;
const int RouterInfoRsp::kDownVolumeFieldNumber;
#endif  // !_MSC_VER

RouterInfoRsp::RouterInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.RouterInfoRsp)
}

void RouterInfoRsp::InitAsDefaultInstance() {
}

RouterInfoRsp::RouterInfoRsp(const RouterInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.RouterInfoRsp)
}

void RouterInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  up_volume_ = 0u;
  down_volume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterInfoRsp::~RouterInfoRsp() {
  // @@protoc_insertion_point(destructor:internal.RouterInfoRsp)
  SharedDtor();
}

void RouterInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouterInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterInfoRsp_descriptor_;
}

const RouterInfoRsp& RouterInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

RouterInfoRsp* RouterInfoRsp::default_instance_ = NULL;

RouterInfoRsp* RouterInfoRsp::New() const {
  return new RouterInfoRsp;
}

void RouterInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RouterInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(up_volume_, down_volume_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouterInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.RouterInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 up_volume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_volume_)));
          set_has_up_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down_volume;
        break;
      }

      // required uint32 down_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_down_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_volume_)));
          set_has_down_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.RouterInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.RouterInfoRsp)
  return false;
#undef DO_
}

void RouterInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.RouterInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->up_volume(), output);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->down_volume(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.RouterInfoRsp)
}

::google::protobuf::uint8* RouterInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.RouterInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->up_volume(), target);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->down_volume(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.RouterInfoRsp)
  return target;
}

int RouterInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 up_volume = 1;
    if (has_up_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_volume());
    }

    // required uint32 down_volume = 2;
    if (has_down_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_volume());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouterInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouterInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouterInfoRsp::MergeFrom(const RouterInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_up_volume()) {
      set_up_volume(from.up_volume());
    }
    if (from.has_down_volume()) {
      set_down_volume(from.down_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouterInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterInfoRsp::CopyFrom(const RouterInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RouterInfoRsp::Swap(RouterInfoRsp* other) {
  if (other != this) {
    std::swap(up_volume_, other->up_volume_);
    std::swap(down_volume_, other->down_volume_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouterInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterInfoRsp_descriptor_;
  metadata.reflection = RouterInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardMessageReq::kDstTypeFieldNumber;
const int ForwardMessageReq::kDstChildIdFieldNumber;
const int ForwardMessageReq::kMessageLengthFieldNumber;
#endif  // !_MSC_VER

ForwardMessageReq::ForwardMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.ForwardMessageReq)
}

void ForwardMessageReq::InitAsDefaultInstance() {
}

ForwardMessageReq::ForwardMessageReq(const ForwardMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.ForwardMessageReq)
}

void ForwardMessageReq::SharedCtor() {
  _cached_size_ = 0;
  dst_type_ = 1;
  dst_child_id_ = 1u;
  message_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardMessageReq::~ForwardMessageReq() {
  // @@protoc_insertion_point(destructor:internal.ForwardMessageReq)
  SharedDtor();
}

void ForwardMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForwardMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardMessageReq_descriptor_;
}

const ForwardMessageReq& ForwardMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

ForwardMessageReq* ForwardMessageReq::default_instance_ = NULL;

ForwardMessageReq* ForwardMessageReq::New() const {
  return new ForwardMessageReq;
}

void ForwardMessageReq::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    dst_type_ = 1;
    dst_child_id_ = 1u;
    message_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.ForwardMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.NodeType dst_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::NodeType_IsValid(value)) {
            set_dst_type(static_cast< ::internal::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dst_child_id;
        break;
      }

      // optional uint32 dst_child_id = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_dst_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dst_child_id_)));
          set_has_dst_child_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_length;
        break;
      }

      // required uint32 message_length = 3;
      case 3: {
        if (tag == 24) {
         parse_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.ForwardMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.ForwardMessageReq)
  return false;
#undef DO_
}

void ForwardMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.ForwardMessageReq)
  // required .internal.NodeType dst_type = 1;
  if (has_dst_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dst_type(), output);
  }

  // optional uint32 dst_child_id = 2 [default = 1];
  if (has_dst_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->dst_child_id(), output);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.ForwardMessageReq)
}

::google::protobuf::uint8* ForwardMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.ForwardMessageReq)
  // required .internal.NodeType dst_type = 1;
  if (has_dst_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dst_type(), target);
  }

  // optional uint32 dst_child_id = 2 [default = 1];
  if (has_dst_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->dst_child_id(), target);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.ForwardMessageReq)
  return target;
}

int ForwardMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.NodeType dst_type = 1;
    if (has_dst_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dst_type());
    }

    // optional uint32 dst_child_id = 2 [default = 1];
    if (has_dst_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->dst_child_id());
    }

    // required uint32 message_length = 3;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardMessageReq::MergeFrom(const ForwardMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst_type()) {
      set_dst_type(from.dst_type());
    }
    if (from.has_dst_child_id()) {
      set_dst_child_id(from.dst_child_id());
    }
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardMessageReq::CopyFrom(const ForwardMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void ForwardMessageReq::Swap(ForwardMessageReq* other) {
  if (other != this) {
    std::swap(dst_type_, other->dst_type_);
    std::swap(dst_child_id_, other->dst_child_id_);
    std::swap(message_length_, other->message_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardMessageReq_descriptor_;
  metadata.reflection = ForwardMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardMessageRsp::kSrcTypeFieldNumber;
const int ForwardMessageRsp::kSrcChildIdFieldNumber;
const int ForwardMessageRsp::kMessageLengthFieldNumber;
#endif  // !_MSC_VER

ForwardMessageRsp::ForwardMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.ForwardMessageRsp)
}

void ForwardMessageRsp::InitAsDefaultInstance() {
}

ForwardMessageRsp::ForwardMessageRsp(const ForwardMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.ForwardMessageRsp)
}

void ForwardMessageRsp::SharedCtor() {
  _cached_size_ = 0;
  src_type_ = 1;
  src_child_id_ = 1u;
  message_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardMessageRsp::~ForwardMessageRsp() {
  // @@protoc_insertion_point(destructor:internal.ForwardMessageRsp)
  SharedDtor();
}

void ForwardMessageRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ForwardMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardMessageRsp_descriptor_;
}

const ForwardMessageRsp& ForwardMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

ForwardMessageRsp* ForwardMessageRsp::default_instance_ = NULL;

ForwardMessageRsp* ForwardMessageRsp::New() const {
  return new ForwardMessageRsp;
}

void ForwardMessageRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    src_type_ = 1;
    src_child_id_ = 1u;
    message_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.ForwardMessageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.NodeType src_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::NodeType_IsValid(value)) {
            set_src_type(static_cast< ::internal::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_child_id;
        break;
      }

      // optional uint32 src_child_id = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_src_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_child_id_)));
          set_has_src_child_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_length;
        break;
      }

      // required uint32 message_length = 3;
      case 3: {
        if (tag == 24) {
         parse_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.ForwardMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.ForwardMessageRsp)
  return false;
#undef DO_
}

void ForwardMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.ForwardMessageRsp)
  // required .internal.NodeType src_type = 1;
  if (has_src_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src_type(), output);
  }

  // optional uint32 src_child_id = 2 [default = 1];
  if (has_src_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_child_id(), output);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.ForwardMessageRsp)
}

::google::protobuf::uint8* ForwardMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.ForwardMessageRsp)
  // required .internal.NodeType src_type = 1;
  if (has_src_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src_type(), target);
  }

  // optional uint32 src_child_id = 2 [default = 1];
  if (has_src_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_child_id(), target);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.ForwardMessageRsp)
  return target;
}

int ForwardMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.NodeType src_type = 1;
    if (has_src_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_type());
    }

    // optional uint32 src_child_id = 2 [default = 1];
    if (has_src_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_child_id());
    }

    // required uint32 message_length = 3;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardMessageRsp::MergeFrom(const ForwardMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_type()) {
      set_src_type(from.src_type());
    }
    if (from.has_src_child_id()) {
      set_src_child_id(from.src_child_id());
    }
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardMessageRsp::CopyFrom(const ForwardMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardMessageRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void ForwardMessageRsp::Swap(ForwardMessageRsp* other) {
  if (other != this) {
    std::swap(src_type_, other->src_type_);
    std::swap(src_child_id_, other->src_child_id_);
    std::swap(message_length_, other->message_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardMessageRsp_descriptor_;
  metadata.reflection = ForwardMessageRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastMessageReq::kDstListsFieldNumber;
const int BroadcastMessageReq::kMessageLengthFieldNumber;
#endif  // !_MSC_VER

BroadcastMessageReq::BroadcastMessageReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.BroadcastMessageReq)
}

void BroadcastMessageReq::InitAsDefaultInstance() {
}

BroadcastMessageReq::BroadcastMessageReq(const BroadcastMessageReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.BroadcastMessageReq)
}

void BroadcastMessageReq::SharedCtor() {
  _cached_size_ = 0;
  message_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastMessageReq::~BroadcastMessageReq() {
  // @@protoc_insertion_point(destructor:internal.BroadcastMessageReq)
  SharedDtor();
}

void BroadcastMessageReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastMessageReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMessageReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastMessageReq_descriptor_;
}

const BroadcastMessageReq& BroadcastMessageReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

BroadcastMessageReq* BroadcastMessageReq::default_instance_ = NULL;

BroadcastMessageReq* BroadcastMessageReq::New() const {
  return new BroadcastMessageReq;
}

void BroadcastMessageReq::Clear() {
  message_length_ = 0u;
  dst_lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastMessageReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.BroadcastMessageReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .internal.NodeType dst_lists = 1;
      case 1: {
        if (tag == 8) {
         parse_dst_lists:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::NodeType_IsValid(value)) {
            add_dst_lists(static_cast< ::internal::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::internal::NodeType_IsValid,
                 this->mutable_dst_lists())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dst_lists;
        if (input->ExpectTag(24)) goto parse_message_length;
        break;
      }

      // required uint32 message_length = 3;
      case 3: {
        if (tag == 24) {
         parse_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.BroadcastMessageReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.BroadcastMessageReq)
  return false;
#undef DO_
}

void BroadcastMessageReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.BroadcastMessageReq)
  // repeated .internal.NodeType dst_lists = 1;
  for (int i = 0; i < this->dst_lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dst_lists(i), output);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.BroadcastMessageReq)
}

::google::protobuf::uint8* BroadcastMessageReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.BroadcastMessageReq)
  // repeated .internal.NodeType dst_lists = 1;
  for (int i = 0; i < this->dst_lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dst_lists(i), target);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.BroadcastMessageReq)
  return target;
}

int BroadcastMessageReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required uint32 message_length = 3;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

  }
  // repeated .internal.NodeType dst_lists = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_lists_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dst_lists(i));
    }
    total_size += 1 * this->dst_lists_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMessageReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastMessageReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastMessageReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastMessageReq::MergeFrom(const BroadcastMessageReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  dst_lists_.MergeFrom(from.dst_lists_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastMessageReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMessageReq::CopyFrom(const BroadcastMessageReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMessageReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void BroadcastMessageReq::Swap(BroadcastMessageReq* other) {
  if (other != this) {
    dst_lists_.Swap(&other->dst_lists_);
    std::swap(message_length_, other->message_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastMessageReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastMessageReq_descriptor_;
  metadata.reflection = BroadcastMessageReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastMessageRsp::kSrcTypeFieldNumber;
const int BroadcastMessageRsp::kSrcChildIdFieldNumber;
const int BroadcastMessageRsp::kMessageLengthFieldNumber;
#endif  // !_MSC_VER

BroadcastMessageRsp::BroadcastMessageRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:internal.BroadcastMessageRsp)
}

void BroadcastMessageRsp::InitAsDefaultInstance() {
}

BroadcastMessageRsp::BroadcastMessageRsp(const BroadcastMessageRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:internal.BroadcastMessageRsp)
}

void BroadcastMessageRsp::SharedCtor() {
  _cached_size_ = 0;
  src_type_ = 1;
  src_child_id_ = 1u;
  message_length_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastMessageRsp::~BroadcastMessageRsp() {
  // @@protoc_insertion_point(destructor:internal.BroadcastMessageRsp)
  SharedDtor();
}

void BroadcastMessageRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BroadcastMessageRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastMessageRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastMessageRsp_descriptor_;
}

const BroadcastMessageRsp& BroadcastMessageRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2finternal_2eprotocol_2eproto();
  return *default_instance_;
}

BroadcastMessageRsp* BroadcastMessageRsp::default_instance_ = NULL;

BroadcastMessageRsp* BroadcastMessageRsp::New() const {
  return new BroadcastMessageRsp;
}

void BroadcastMessageRsp::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    src_type_ = 1;
    src_child_id_ = 1u;
    message_length_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastMessageRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:internal.BroadcastMessageRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .internal.NodeType src_type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::internal::NodeType_IsValid(value)) {
            set_src_type(static_cast< ::internal::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_src_child_id;
        break;
      }

      // optional uint32 src_child_id = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_src_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &src_child_id_)));
          set_has_src_child_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_message_length;
        break;
      }

      // required uint32 message_length = 3;
      case 3: {
        if (tag == 24) {
         parse_message_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &message_length_)));
          set_has_message_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:internal.BroadcastMessageRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:internal.BroadcastMessageRsp)
  return false;
#undef DO_
}

void BroadcastMessageRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:internal.BroadcastMessageRsp)
  // required .internal.NodeType src_type = 1;
  if (has_src_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->src_type(), output);
  }

  // optional uint32 src_child_id = 2 [default = 1];
  if (has_src_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->src_child_id(), output);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->message_length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:internal.BroadcastMessageRsp)
}

::google::protobuf::uint8* BroadcastMessageRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:internal.BroadcastMessageRsp)
  // required .internal.NodeType src_type = 1;
  if (has_src_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->src_type(), target);
  }

  // optional uint32 src_child_id = 2 [default = 1];
  if (has_src_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->src_child_id(), target);
  }

  // required uint32 message_length = 3;
  if (has_message_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->message_length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:internal.BroadcastMessageRsp)
  return target;
}

int BroadcastMessageRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .internal.NodeType src_type = 1;
    if (has_src_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->src_type());
    }

    // optional uint32 src_child_id = 2 [default = 1];
    if (has_src_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->src_child_id());
    }

    // required uint32 message_length = 3;
    if (has_message_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->message_length());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastMessageRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastMessageRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastMessageRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastMessageRsp::MergeFrom(const BroadcastMessageRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src_type()) {
      set_src_type(from.src_type());
    }
    if (from.has_src_child_id()) {
      set_src_child_id(from.src_child_id());
    }
    if (from.has_message_length()) {
      set_message_length(from.message_length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastMessageRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastMessageRsp::CopyFrom(const BroadcastMessageRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastMessageRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void BroadcastMessageRsp::Swap(BroadcastMessageRsp* other) {
  if (other != this) {
    std::swap(src_type_, other->src_type_);
    std::swap(src_child_id_, other->src_child_id_);
    std::swap(message_length_, other->message_length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastMessageRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastMessageRsp_descriptor_;
  metadata.reflection = BroadcastMessageRsp_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal

// @@protoc_insertion_point(global_scope)
