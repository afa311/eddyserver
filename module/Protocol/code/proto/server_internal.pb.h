// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/server_internal.proto

#ifndef PROTOBUF_proto_2fserver_5finternal_2eproto__INCLUDED
#define PROTOBUF_proto_2fserver_5finternal_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/public_enum.pb.h"
// @@protoc_insertion_point(includes)

namespace svr {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

class LoginDBAgentReq;
class LoginDBAgentRsp;
class DBAgentInfoReq;
class DBAgentInfoRsp;
class QueryDBAgentReq;
class QueryDBAgentRsp;
class DBErrorRsp;
class DBAgentErrorRsp;
class ChildNode;
class RouterErrorRsp;
class LoginRouterReq;
class LoginRouterRsp;
class RouterInfoReq;
class RouterInfoRsp;
class ForwardReq;
class BroadcastReq;
class RouterNotify;

enum QueryDBAgentReq_ActoinType {
  QueryDBAgentReq_ActoinType_kSelect = 1,
  QueryDBAgentReq_ActoinType_kInsert = 2,
  QueryDBAgentReq_ActoinType_kUpdate = 3,
  QueryDBAgentReq_ActoinType_kDelete = 4
};
bool QueryDBAgentReq_ActoinType_IsValid(int value);
const QueryDBAgentReq_ActoinType QueryDBAgentReq_ActoinType_ActoinType_MIN = QueryDBAgentReq_ActoinType_kSelect;
const QueryDBAgentReq_ActoinType QueryDBAgentReq_ActoinType_ActoinType_MAX = QueryDBAgentReq_ActoinType_kDelete;
const int QueryDBAgentReq_ActoinType_ActoinType_ARRAYSIZE = QueryDBAgentReq_ActoinType_ActoinType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_ActoinType_descriptor();
inline const ::std::string& QueryDBAgentReq_ActoinType_Name(QueryDBAgentReq_ActoinType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryDBAgentReq_ActoinType_descriptor(), value);
}
inline bool QueryDBAgentReq_ActoinType_Parse(
    const ::std::string& name, QueryDBAgentReq_ActoinType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryDBAgentReq_ActoinType>(
    QueryDBAgentReq_ActoinType_descriptor(), name, value);
}
enum QueryDBAgentReq_DatabaseType {
  QueryDBAgentReq_DatabaseType_kRedis = 1,
  QueryDBAgentReq_DatabaseType_kMySQL = 2
};
bool QueryDBAgentReq_DatabaseType_IsValid(int value);
const QueryDBAgentReq_DatabaseType QueryDBAgentReq_DatabaseType_DatabaseType_MIN = QueryDBAgentReq_DatabaseType_kRedis;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq_DatabaseType_DatabaseType_MAX = QueryDBAgentReq_DatabaseType_kMySQL;
const int QueryDBAgentReq_DatabaseType_DatabaseType_ARRAYSIZE = QueryDBAgentReq_DatabaseType_DatabaseType_MAX + 1;

const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_DatabaseType_descriptor();
inline const ::std::string& QueryDBAgentReq_DatabaseType_Name(QueryDBAgentReq_DatabaseType value) {
  return ::google::protobuf::internal::NameOfEnum(
    QueryDBAgentReq_DatabaseType_descriptor(), value);
}
inline bool QueryDBAgentReq_DatabaseType_Parse(
    const ::std::string& name, QueryDBAgentReq_DatabaseType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<QueryDBAgentReq_DatabaseType>(
    QueryDBAgentReq_DatabaseType_descriptor(), name, value);
}
enum NodeType {
  kLoginServer = 1,
  kLinkerServer = 2,
  kMainLogicSever = 3
};
bool NodeType_IsValid(int value);
const NodeType NodeType_MIN = kLoginServer;
const NodeType NodeType_MAX = kMainLogicSever;
const int NodeType_ARRAYSIZE = NodeType_MAX + 1;

const ::google::protobuf::EnumDescriptor* NodeType_descriptor();
inline const ::std::string& NodeType_Name(NodeType value) {
  return ::google::protobuf::internal::NameOfEnum(
    NodeType_descriptor(), value);
}
inline bool NodeType_Parse(
    const ::std::string& name, NodeType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<NodeType>(
    NodeType_descriptor(), name, value);
}
// ===================================================================

class LoginDBAgentReq : public ::google::protobuf::Message {
 public:
  LoginDBAgentReq();
  virtual ~LoginDBAgentReq();

  LoginDBAgentReq(const LoginDBAgentReq& from);

  inline LoginDBAgentReq& operator=(const LoginDBAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginDBAgentReq& default_instance();

  void Swap(LoginDBAgentReq* other);

  // implements Message ----------------------------------------------

  LoginDBAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginDBAgentReq& from);
  void MergeFrom(const LoginDBAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svr.LoginDBAgentReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static LoginDBAgentReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginDBAgentRsp : public ::google::protobuf::Message {
 public:
  LoginDBAgentRsp();
  virtual ~LoginDBAgentRsp();

  LoginDBAgentRsp(const LoginDBAgentRsp& from);

  inline LoginDBAgentRsp& operator=(const LoginDBAgentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginDBAgentRsp& default_instance();

  void Swap(LoginDBAgentRsp* other);

  // implements Message ----------------------------------------------

  LoginDBAgentRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginDBAgentRsp& from);
  void MergeFrom(const LoginDBAgentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 heartbeat_interval = 1;
  inline bool has_heartbeat_interval() const;
  inline void clear_heartbeat_interval();
  static const int kHeartbeatIntervalFieldNumber = 1;
  inline ::google::protobuf::uint32 heartbeat_interval() const;
  inline void set_heartbeat_interval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:svr.LoginDBAgentRsp)
 private:
  inline void set_has_heartbeat_interval();
  inline void clear_has_heartbeat_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 heartbeat_interval_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static LoginDBAgentRsp* default_instance_;
};
// -------------------------------------------------------------------

class DBAgentInfoReq : public ::google::protobuf::Message {
 public:
  DBAgentInfoReq();
  virtual ~DBAgentInfoReq();

  DBAgentInfoReq(const DBAgentInfoReq& from);

  inline DBAgentInfoReq& operator=(const DBAgentInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBAgentInfoReq& default_instance();

  void Swap(DBAgentInfoReq* other);

  // implements Message ----------------------------------------------

  DBAgentInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBAgentInfoReq& from);
  void MergeFrom(const DBAgentInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svr.DBAgentInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static DBAgentInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class DBAgentInfoRsp : public ::google::protobuf::Message {
 public:
  DBAgentInfoRsp();
  virtual ~DBAgentInfoRsp();

  DBAgentInfoRsp(const DBAgentInfoRsp& from);

  inline DBAgentInfoRsp& operator=(const DBAgentInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBAgentInfoRsp& default_instance();

  void Swap(DBAgentInfoRsp* other);

  // implements Message ----------------------------------------------

  DBAgentInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBAgentInfoRsp& from);
  void MergeFrom(const DBAgentInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 up_volume = 1;
  inline bool has_up_volume() const;
  inline void clear_up_volume();
  static const int kUpVolumeFieldNumber = 1;
  inline ::google::protobuf::uint32 up_volume() const;
  inline void set_up_volume(::google::protobuf::uint32 value);

  // required uint32 down_volume = 2;
  inline bool has_down_volume() const;
  inline void clear_down_volume();
  static const int kDownVolumeFieldNumber = 2;
  inline ::google::protobuf::uint32 down_volume() const;
  inline void set_down_volume(::google::protobuf::uint32 value);

  // required uint32 handle_select_count = 3;
  inline bool has_handle_select_count() const;
  inline void clear_handle_select_count();
  static const int kHandleSelectCountFieldNumber = 3;
  inline ::google::protobuf::uint32 handle_select_count() const;
  inline void set_handle_select_count(::google::protobuf::uint32 value);

  // required uint32 handle_insert_count = 4;
  inline bool has_handle_insert_count() const;
  inline void clear_handle_insert_count();
  static const int kHandleInsertCountFieldNumber = 4;
  inline ::google::protobuf::uint32 handle_insert_count() const;
  inline void set_handle_insert_count(::google::protobuf::uint32 value);

  // required uint32 handle_update_count = 5;
  inline bool has_handle_update_count() const;
  inline void clear_handle_update_count();
  static const int kHandleUpdateCountFieldNumber = 5;
  inline ::google::protobuf::uint32 handle_update_count() const;
  inline void set_handle_update_count(::google::protobuf::uint32 value);

  // required uint32 handle_delete_count = 6;
  inline bool has_handle_delete_count() const;
  inline void clear_handle_delete_count();
  static const int kHandleDeleteCountFieldNumber = 6;
  inline ::google::protobuf::uint32 handle_delete_count() const;
  inline void set_handle_delete_count(::google::protobuf::uint32 value);

  // required uint32 client_num = 7;
  inline bool has_client_num() const;
  inline void clear_client_num();
  static const int kClientNumFieldNumber = 7;
  inline ::google::protobuf::uint32 client_num() const;
  inline void set_client_num(::google::protobuf::uint32 value);

  // required uint32 queue_num = 8;
  inline bool has_queue_num() const;
  inline void clear_queue_num();
  static const int kQueueNumFieldNumber = 8;
  inline ::google::protobuf::uint32 queue_num() const;
  inline void set_queue_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:svr.DBAgentInfoRsp)
 private:
  inline void set_has_up_volume();
  inline void clear_has_up_volume();
  inline void set_has_down_volume();
  inline void clear_has_down_volume();
  inline void set_has_handle_select_count();
  inline void clear_has_handle_select_count();
  inline void set_has_handle_insert_count();
  inline void clear_has_handle_insert_count();
  inline void set_has_handle_update_count();
  inline void clear_has_handle_update_count();
  inline void set_has_handle_delete_count();
  inline void clear_has_handle_delete_count();
  inline void set_has_client_num();
  inline void clear_has_client_num();
  inline void set_has_queue_num();
  inline void clear_has_queue_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 up_volume_;
  ::google::protobuf::uint32 down_volume_;
  ::google::protobuf::uint32 handle_select_count_;
  ::google::protobuf::uint32 handle_insert_count_;
  ::google::protobuf::uint32 handle_update_count_;
  ::google::protobuf::uint32 handle_delete_count_;
  ::google::protobuf::uint32 client_num_;
  ::google::protobuf::uint32 queue_num_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static DBAgentInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class QueryDBAgentReq : public ::google::protobuf::Message {
 public:
  QueryDBAgentReq();
  virtual ~QueryDBAgentReq();

  QueryDBAgentReq(const QueryDBAgentReq& from);

  inline QueryDBAgentReq& operator=(const QueryDBAgentReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDBAgentReq& default_instance();

  void Swap(QueryDBAgentReq* other);

  // implements Message ----------------------------------------------

  QueryDBAgentReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDBAgentReq& from);
  void MergeFrom(const QueryDBAgentReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef QueryDBAgentReq_ActoinType ActoinType;
  static const ActoinType kSelect = QueryDBAgentReq_ActoinType_kSelect;
  static const ActoinType kInsert = QueryDBAgentReq_ActoinType_kInsert;
  static const ActoinType kUpdate = QueryDBAgentReq_ActoinType_kUpdate;
  static const ActoinType kDelete = QueryDBAgentReq_ActoinType_kDelete;
  static inline bool ActoinType_IsValid(int value) {
    return QueryDBAgentReq_ActoinType_IsValid(value);
  }
  static const ActoinType ActoinType_MIN =
    QueryDBAgentReq_ActoinType_ActoinType_MIN;
  static const ActoinType ActoinType_MAX =
    QueryDBAgentReq_ActoinType_ActoinType_MAX;
  static const int ActoinType_ARRAYSIZE =
    QueryDBAgentReq_ActoinType_ActoinType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  ActoinType_descriptor() {
    return QueryDBAgentReq_ActoinType_descriptor();
  }
  static inline const ::std::string& ActoinType_Name(ActoinType value) {
    return QueryDBAgentReq_ActoinType_Name(value);
  }
  static inline bool ActoinType_Parse(const ::std::string& name,
      ActoinType* value) {
    return QueryDBAgentReq_ActoinType_Parse(name, value);
  }

  typedef QueryDBAgentReq_DatabaseType DatabaseType;
  static const DatabaseType kRedis = QueryDBAgentReq_DatabaseType_kRedis;
  static const DatabaseType kMySQL = QueryDBAgentReq_DatabaseType_kMySQL;
  static inline bool DatabaseType_IsValid(int value) {
    return QueryDBAgentReq_DatabaseType_IsValid(value);
  }
  static const DatabaseType DatabaseType_MIN =
    QueryDBAgentReq_DatabaseType_DatabaseType_MIN;
  static const DatabaseType DatabaseType_MAX =
    QueryDBAgentReq_DatabaseType_DatabaseType_MAX;
  static const int DatabaseType_ARRAYSIZE =
    QueryDBAgentReq_DatabaseType_DatabaseType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  DatabaseType_descriptor() {
    return QueryDBAgentReq_DatabaseType_descriptor();
  }
  static inline const ::std::string& DatabaseType_Name(DatabaseType value) {
    return QueryDBAgentReq_DatabaseType_Name(value);
  }
  static inline bool DatabaseType_Parse(const ::std::string& name,
      DatabaseType* value) {
    return QueryDBAgentReq_DatabaseType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // required uint32 sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // required .svr.QueryDBAgentReq.DatabaseType dbtype = 2;
  inline bool has_dbtype() const;
  inline void clear_dbtype();
  static const int kDbtypeFieldNumber = 2;
  inline ::svr::QueryDBAgentReq_DatabaseType dbtype() const;
  inline void set_dbtype(::svr::QueryDBAgentReq_DatabaseType value);

  // required .svr.QueryDBAgentReq.ActoinType action = 3;
  inline bool has_action() const;
  inline void clear_action();
  static const int kActionFieldNumber = 3;
  inline ::svr::QueryDBAgentReq_ActoinType action() const;
  inline void set_action(::svr::QueryDBAgentReq_ActoinType value);

  // required string dbname = 4;
  inline bool has_dbname() const;
  inline void clear_dbname();
  static const int kDbnameFieldNumber = 4;
  inline const ::std::string& dbname() const;
  inline void set_dbname(const ::std::string& value);
  inline void set_dbname(const char* value);
  inline void set_dbname(const char* value, size_t size);
  inline ::std::string* mutable_dbname();
  inline ::std::string* release_dbname();
  inline void set_allocated_dbname(::std::string* dbname);

  // optional string statement = 5;
  inline bool has_statement() const;
  inline void clear_statement();
  static const int kStatementFieldNumber = 5;
  inline const ::std::string& statement() const;
  inline void set_statement(const ::std::string& value);
  inline void set_statement(const char* value);
  inline void set_statement(const char* value, size_t size);
  inline ::std::string* mutable_statement();
  inline ::std::string* release_statement();
  inline void set_allocated_statement(::std::string* statement);

  // @@protoc_insertion_point(class_scope:svr.QueryDBAgentReq)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_dbtype();
  inline void clear_has_dbtype();
  inline void set_has_action();
  inline void clear_has_action();
  inline void set_has_dbname();
  inline void clear_has_dbname();
  inline void set_has_statement();
  inline void clear_has_statement();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sequence_;
  int dbtype_;
  ::std::string* dbname_;
  ::std::string* statement_;
  int action_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static QueryDBAgentReq* default_instance_;
};
// -------------------------------------------------------------------

class QueryDBAgentRsp : public ::google::protobuf::Message {
 public:
  QueryDBAgentRsp();
  virtual ~QueryDBAgentRsp();

  QueryDBAgentRsp(const QueryDBAgentRsp& from);

  inline QueryDBAgentRsp& operator=(const QueryDBAgentRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QueryDBAgentRsp& default_instance();

  void Swap(QueryDBAgentRsp* other);

  // implements Message ----------------------------------------------

  QueryDBAgentRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const QueryDBAgentRsp& from);
  void MergeFrom(const QueryDBAgentRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // optional string result = 2;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 2;
  inline const ::std::string& result() const;
  inline void set_result(const ::std::string& value);
  inline void set_result(const char* value);
  inline void set_result(const char* value, size_t size);
  inline ::std::string* mutable_result();
  inline ::std::string* release_result();
  inline void set_allocated_result(::std::string* result);

  // @@protoc_insertion_point(class_scope:svr.QueryDBAgentRsp)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* result_;
  ::google::protobuf::uint32 sequence_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static QueryDBAgentRsp* default_instance_;
};
// -------------------------------------------------------------------

class DBErrorRsp : public ::google::protobuf::Message {
 public:
  DBErrorRsp();
  virtual ~DBErrorRsp();

  DBErrorRsp(const DBErrorRsp& from);

  inline DBErrorRsp& operator=(const DBErrorRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBErrorRsp& default_instance();

  void Swap(DBErrorRsp* other);

  // implements Message ----------------------------------------------

  DBErrorRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBErrorRsp& from);
  void MergeFrom(const DBErrorRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 sequence = 1;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 1;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // required int32 error_code = 2;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 2;
  inline ::google::protobuf::int32 error_code() const;
  inline void set_error_code(::google::protobuf::int32 value);

  // optional string what = 3;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 3;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:svr.DBErrorRsp)
 private:
  inline void set_has_sequence();
  inline void clear_has_sequence();
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 sequence_;
  ::google::protobuf::int32 error_code_;
  ::std::string* what_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static DBErrorRsp* default_instance_;
};
// -------------------------------------------------------------------

class DBAgentErrorRsp : public ::google::protobuf::Message {
 public:
  DBAgentErrorRsp();
  virtual ~DBAgentErrorRsp();

  DBAgentErrorRsp(const DBAgentErrorRsp& from);

  inline DBAgentErrorRsp& operator=(const DBAgentErrorRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DBAgentErrorRsp& default_instance();

  void Swap(DBAgentErrorRsp* other);

  // implements Message ----------------------------------------------

  DBAgentErrorRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DBAgentErrorRsp& from);
  void MergeFrom(const DBAgentErrorRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pub.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::pub::ErrorCode error_code() const;
  inline void set_error_code(::pub::ErrorCode value);

  // optional uint32 sequence = 2;
  inline bool has_sequence() const;
  inline void clear_sequence();
  static const int kSequenceFieldNumber = 2;
  inline ::google::protobuf::uint32 sequence() const;
  inline void set_sequence(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:svr.DBAgentErrorRsp)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_sequence();
  inline void clear_has_sequence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int error_code_;
  ::google::protobuf::uint32 sequence_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static DBAgentErrorRsp* default_instance_;
};
// -------------------------------------------------------------------

class ChildNode : public ::google::protobuf::Message {
 public:
  ChildNode();
  virtual ~ChildNode();

  ChildNode(const ChildNode& from);

  inline ChildNode& operator=(const ChildNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ChildNode& default_instance();

  void Swap(ChildNode* other);

  // implements Message ----------------------------------------------

  ChildNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ChildNode& from);
  void MergeFrom(const ChildNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .svr.NodeType type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::svr::NodeType type() const;
  inline void set_type(::svr::NodeType value);

  // optional uint32 child_id = 2 [default = 1];
  inline bool has_child_id() const;
  inline void clear_child_id();
  static const int kChildIdFieldNumber = 2;
  inline ::google::protobuf::uint32 child_id() const;
  inline void set_child_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:svr.ChildNode)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_child_id();
  inline void clear_has_child_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  int type_;
  ::google::protobuf::uint32 child_id_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static ChildNode* default_instance_;
};
// -------------------------------------------------------------------

class RouterErrorRsp : public ::google::protobuf::Message {
 public:
  RouterErrorRsp();
  virtual ~RouterErrorRsp();

  RouterErrorRsp(const RouterErrorRsp& from);

  inline RouterErrorRsp& operator=(const RouterErrorRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterErrorRsp& default_instance();

  void Swap(RouterErrorRsp* other);

  // implements Message ----------------------------------------------

  RouterErrorRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouterErrorRsp& from);
  void MergeFrom(const RouterErrorRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .pub.ErrorCode error_code = 1;
  inline bool has_error_code() const;
  inline void clear_error_code();
  static const int kErrorCodeFieldNumber = 1;
  inline ::pub::ErrorCode error_code() const;
  inline void set_error_code(::pub::ErrorCode value);

  // optional string what = 2;
  inline bool has_what() const;
  inline void clear_what();
  static const int kWhatFieldNumber = 2;
  inline const ::std::string& what() const;
  inline void set_what(const ::std::string& value);
  inline void set_what(const char* value);
  inline void set_what(const char* value, size_t size);
  inline ::std::string* mutable_what();
  inline ::std::string* release_what();
  inline void set_allocated_what(::std::string* what);

  // @@protoc_insertion_point(class_scope:svr.RouterErrorRsp)
 private:
  inline void set_has_error_code();
  inline void clear_has_error_code();
  inline void set_has_what();
  inline void clear_has_what();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* what_;
  int error_code_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static RouterErrorRsp* default_instance_;
};
// -------------------------------------------------------------------

class LoginRouterReq : public ::google::protobuf::Message {
 public:
  LoginRouterReq();
  virtual ~LoginRouterReq();

  LoginRouterReq(const LoginRouterReq& from);

  inline LoginRouterReq& operator=(const LoginRouterReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRouterReq& default_instance();

  void Swap(LoginRouterReq* other);

  // implements Message ----------------------------------------------

  LoginRouterReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRouterReq& from);
  void MergeFrom(const LoginRouterReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .svr.ChildNode node = 1;
  inline bool has_node() const;
  inline void clear_node();
  static const int kNodeFieldNumber = 1;
  inline const ::svr::ChildNode& node() const;
  inline ::svr::ChildNode* mutable_node();
  inline ::svr::ChildNode* release_node();
  inline void set_allocated_node(::svr::ChildNode* node);

  // @@protoc_insertion_point(class_scope:svr.LoginRouterReq)
 private:
  inline void set_has_node();
  inline void clear_has_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::svr::ChildNode* node_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static LoginRouterReq* default_instance_;
};
// -------------------------------------------------------------------

class LoginRouterRsp : public ::google::protobuf::Message {
 public:
  LoginRouterRsp();
  virtual ~LoginRouterRsp();

  LoginRouterRsp(const LoginRouterRsp& from);

  inline LoginRouterRsp& operator=(const LoginRouterRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LoginRouterRsp& default_instance();

  void Swap(LoginRouterRsp* other);

  // implements Message ----------------------------------------------

  LoginRouterRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LoginRouterRsp& from);
  void MergeFrom(const LoginRouterRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 heartbeat_interval = 1;
  inline bool has_heartbeat_interval() const;
  inline void clear_heartbeat_interval();
  static const int kHeartbeatIntervalFieldNumber = 1;
  inline ::google::protobuf::uint32 heartbeat_interval() const;
  inline void set_heartbeat_interval(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:svr.LoginRouterRsp)
 private:
  inline void set_has_heartbeat_interval();
  inline void clear_has_heartbeat_interval();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 heartbeat_interval_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static LoginRouterRsp* default_instance_;
};
// -------------------------------------------------------------------

class RouterInfoReq : public ::google::protobuf::Message {
 public:
  RouterInfoReq();
  virtual ~RouterInfoReq();

  RouterInfoReq(const RouterInfoReq& from);

  inline RouterInfoReq& operator=(const RouterInfoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterInfoReq& default_instance();

  void Swap(RouterInfoReq* other);

  // implements Message ----------------------------------------------

  RouterInfoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouterInfoReq& from);
  void MergeFrom(const RouterInfoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:svr.RouterInfoReq)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static RouterInfoReq* default_instance_;
};
// -------------------------------------------------------------------

class RouterInfoRsp : public ::google::protobuf::Message {
 public:
  RouterInfoRsp();
  virtual ~RouterInfoRsp();

  RouterInfoRsp(const RouterInfoRsp& from);

  inline RouterInfoRsp& operator=(const RouterInfoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterInfoRsp& default_instance();

  void Swap(RouterInfoRsp* other);

  // implements Message ----------------------------------------------

  RouterInfoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouterInfoRsp& from);
  void MergeFrom(const RouterInfoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 up_volume = 1;
  inline bool has_up_volume() const;
  inline void clear_up_volume();
  static const int kUpVolumeFieldNumber = 1;
  inline ::google::protobuf::uint32 up_volume() const;
  inline void set_up_volume(::google::protobuf::uint32 value);

  // required uint32 down_volume = 2;
  inline bool has_down_volume() const;
  inline void clear_down_volume();
  static const int kDownVolumeFieldNumber = 2;
  inline ::google::protobuf::uint32 down_volume() const;
  inline void set_down_volume(::google::protobuf::uint32 value);

  // repeated .svr.ChildNode node_lists = 3;
  inline int node_lists_size() const;
  inline void clear_node_lists();
  static const int kNodeListsFieldNumber = 3;
  inline const ::svr::ChildNode& node_lists(int index) const;
  inline ::svr::ChildNode* mutable_node_lists(int index);
  inline ::svr::ChildNode* add_node_lists();
  inline const ::google::protobuf::RepeatedPtrField< ::svr::ChildNode >&
      node_lists() const;
  inline ::google::protobuf::RepeatedPtrField< ::svr::ChildNode >*
      mutable_node_lists();

  // @@protoc_insertion_point(class_scope:svr.RouterInfoRsp)
 private:
  inline void set_has_up_volume();
  inline void clear_has_up_volume();
  inline void set_has_down_volume();
  inline void clear_has_down_volume();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 up_volume_;
  ::google::protobuf::uint32 down_volume_;
  ::google::protobuf::RepeatedPtrField< ::svr::ChildNode > node_lists_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static RouterInfoRsp* default_instance_;
};
// -------------------------------------------------------------------

class ForwardReq : public ::google::protobuf::Message {
 public:
  ForwardReq();
  virtual ~ForwardReq();

  ForwardReq(const ForwardReq& from);

  inline ForwardReq& operator=(const ForwardReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ForwardReq& default_instance();

  void Swap(ForwardReq* other);

  // implements Message ----------------------------------------------

  ForwardReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ForwardReq& from);
  void MergeFrom(const ForwardReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .svr.ChildNode dst = 1;
  inline bool has_dst() const;
  inline void clear_dst();
  static const int kDstFieldNumber = 1;
  inline const ::svr::ChildNode& dst() const;
  inline ::svr::ChildNode* mutable_dst();
  inline ::svr::ChildNode* release_dst();
  inline void set_allocated_dst(::svr::ChildNode* dst);

  // required bytes user_data = 2;
  inline bool has_user_data() const;
  inline void clear_user_data();
  static const int kUserDataFieldNumber = 2;
  inline const ::std::string& user_data() const;
  inline void set_user_data(const ::std::string& value);
  inline void set_user_data(const char* value);
  inline void set_user_data(const void* value, size_t size);
  inline ::std::string* mutable_user_data();
  inline ::std::string* release_user_data();
  inline void set_allocated_user_data(::std::string* user_data);

  // @@protoc_insertion_point(class_scope:svr.ForwardReq)
 private:
  inline void set_has_dst();
  inline void clear_has_dst();
  inline void set_has_user_data();
  inline void clear_has_user_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::svr::ChildNode* dst_;
  ::std::string* user_data_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static ForwardReq* default_instance_;
};
// -------------------------------------------------------------------

class BroadcastReq : public ::google::protobuf::Message {
 public:
  BroadcastReq();
  virtual ~BroadcastReq();

  BroadcastReq(const BroadcastReq& from);

  inline BroadcastReq& operator=(const BroadcastReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BroadcastReq& default_instance();

  void Swap(BroadcastReq* other);

  // implements Message ----------------------------------------------

  BroadcastReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BroadcastReq& from);
  void MergeFrom(const BroadcastReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .svr.NodeType dst_lists = 1;
  inline int dst_lists_size() const;
  inline void clear_dst_lists();
  static const int kDstListsFieldNumber = 1;
  inline ::svr::NodeType dst_lists(int index) const;
  inline void set_dst_lists(int index, ::svr::NodeType value);
  inline void add_dst_lists(::svr::NodeType value);
  inline const ::google::protobuf::RepeatedField<int>& dst_lists() const;
  inline ::google::protobuf::RepeatedField<int>* mutable_dst_lists();

  // required bytes user_data = 2;
  inline bool has_user_data() const;
  inline void clear_user_data();
  static const int kUserDataFieldNumber = 2;
  inline const ::std::string& user_data() const;
  inline void set_user_data(const ::std::string& value);
  inline void set_user_data(const char* value);
  inline void set_user_data(const void* value, size_t size);
  inline ::std::string* mutable_user_data();
  inline ::std::string* release_user_data();
  inline void set_allocated_user_data(::std::string* user_data);

  // @@protoc_insertion_point(class_scope:svr.BroadcastReq)
 private:
  inline void set_has_user_data();
  inline void clear_has_user_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField<int> dst_lists_;
  ::std::string* user_data_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static BroadcastReq* default_instance_;
};
// -------------------------------------------------------------------

class RouterNotify : public ::google::protobuf::Message {
 public:
  RouterNotify();
  virtual ~RouterNotify();

  RouterNotify(const RouterNotify& from);

  inline RouterNotify& operator=(const RouterNotify& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouterNotify& default_instance();

  void Swap(RouterNotify* other);

  // implements Message ----------------------------------------------

  RouterNotify* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouterNotify& from);
  void MergeFrom(const RouterNotify& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .svr.ChildNode src = 1;
  inline bool has_src() const;
  inline void clear_src();
  static const int kSrcFieldNumber = 1;
  inline const ::svr::ChildNode& src() const;
  inline ::svr::ChildNode* mutable_src();
  inline ::svr::ChildNode* release_src();
  inline void set_allocated_src(::svr::ChildNode* src);

  // required bytes user_data = 2;
  inline bool has_user_data() const;
  inline void clear_user_data();
  static const int kUserDataFieldNumber = 2;
  inline const ::std::string& user_data() const;
  inline void set_user_data(const ::std::string& value);
  inline void set_user_data(const char* value);
  inline void set_user_data(const void* value, size_t size);
  inline ::std::string* mutable_user_data();
  inline ::std::string* release_user_data();
  inline void set_allocated_user_data(::std::string* user_data);

  // @@protoc_insertion_point(class_scope:svr.RouterNotify)
 private:
  inline void set_has_src();
  inline void clear_has_src();
  inline void set_has_user_data();
  inline void clear_has_user_data();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::svr::ChildNode* src_;
  ::std::string* user_data_;
  friend void  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto();
  friend void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto();

  void InitAsDefaultInstance();
  static RouterNotify* default_instance_;
};
// ===================================================================


// ===================================================================

// LoginDBAgentReq

// -------------------------------------------------------------------

// LoginDBAgentRsp

// required uint32 heartbeat_interval = 1;
inline bool LoginDBAgentRsp::has_heartbeat_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginDBAgentRsp::set_has_heartbeat_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginDBAgentRsp::clear_has_heartbeat_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginDBAgentRsp::clear_heartbeat_interval() {
  heartbeat_interval_ = 0u;
  clear_has_heartbeat_interval();
}
inline ::google::protobuf::uint32 LoginDBAgentRsp::heartbeat_interval() const {
  // @@protoc_insertion_point(field_get:svr.LoginDBAgentRsp.heartbeat_interval)
  return heartbeat_interval_;
}
inline void LoginDBAgentRsp::set_heartbeat_interval(::google::protobuf::uint32 value) {
  set_has_heartbeat_interval();
  heartbeat_interval_ = value;
  // @@protoc_insertion_point(field_set:svr.LoginDBAgentRsp.heartbeat_interval)
}

// -------------------------------------------------------------------

// DBAgentInfoReq

// -------------------------------------------------------------------

// DBAgentInfoRsp

// required uint32 up_volume = 1;
inline bool DBAgentInfoRsp::has_up_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBAgentInfoRsp::set_has_up_volume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBAgentInfoRsp::clear_has_up_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBAgentInfoRsp::clear_up_volume() {
  up_volume_ = 0u;
  clear_has_up_volume();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::up_volume() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.up_volume)
  return up_volume_;
}
inline void DBAgentInfoRsp::set_up_volume(::google::protobuf::uint32 value) {
  set_has_up_volume();
  up_volume_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.up_volume)
}

// required uint32 down_volume = 2;
inline bool DBAgentInfoRsp::has_down_volume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBAgentInfoRsp::set_has_down_volume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBAgentInfoRsp::clear_has_down_volume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBAgentInfoRsp::clear_down_volume() {
  down_volume_ = 0u;
  clear_has_down_volume();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::down_volume() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.down_volume)
  return down_volume_;
}
inline void DBAgentInfoRsp::set_down_volume(::google::protobuf::uint32 value) {
  set_has_down_volume();
  down_volume_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.down_volume)
}

// required uint32 handle_select_count = 3;
inline bool DBAgentInfoRsp::has_handle_select_count() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBAgentInfoRsp::set_has_handle_select_count() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBAgentInfoRsp::clear_has_handle_select_count() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBAgentInfoRsp::clear_handle_select_count() {
  handle_select_count_ = 0u;
  clear_has_handle_select_count();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::handle_select_count() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.handle_select_count)
  return handle_select_count_;
}
inline void DBAgentInfoRsp::set_handle_select_count(::google::protobuf::uint32 value) {
  set_has_handle_select_count();
  handle_select_count_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.handle_select_count)
}

// required uint32 handle_insert_count = 4;
inline bool DBAgentInfoRsp::has_handle_insert_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DBAgentInfoRsp::set_has_handle_insert_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DBAgentInfoRsp::clear_has_handle_insert_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DBAgentInfoRsp::clear_handle_insert_count() {
  handle_insert_count_ = 0u;
  clear_has_handle_insert_count();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::handle_insert_count() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.handle_insert_count)
  return handle_insert_count_;
}
inline void DBAgentInfoRsp::set_handle_insert_count(::google::protobuf::uint32 value) {
  set_has_handle_insert_count();
  handle_insert_count_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.handle_insert_count)
}

// required uint32 handle_update_count = 5;
inline bool DBAgentInfoRsp::has_handle_update_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DBAgentInfoRsp::set_has_handle_update_count() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DBAgentInfoRsp::clear_has_handle_update_count() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DBAgentInfoRsp::clear_handle_update_count() {
  handle_update_count_ = 0u;
  clear_has_handle_update_count();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::handle_update_count() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.handle_update_count)
  return handle_update_count_;
}
inline void DBAgentInfoRsp::set_handle_update_count(::google::protobuf::uint32 value) {
  set_has_handle_update_count();
  handle_update_count_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.handle_update_count)
}

// required uint32 handle_delete_count = 6;
inline bool DBAgentInfoRsp::has_handle_delete_count() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DBAgentInfoRsp::set_has_handle_delete_count() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DBAgentInfoRsp::clear_has_handle_delete_count() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DBAgentInfoRsp::clear_handle_delete_count() {
  handle_delete_count_ = 0u;
  clear_has_handle_delete_count();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::handle_delete_count() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.handle_delete_count)
  return handle_delete_count_;
}
inline void DBAgentInfoRsp::set_handle_delete_count(::google::protobuf::uint32 value) {
  set_has_handle_delete_count();
  handle_delete_count_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.handle_delete_count)
}

// required uint32 client_num = 7;
inline bool DBAgentInfoRsp::has_client_num() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DBAgentInfoRsp::set_has_client_num() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DBAgentInfoRsp::clear_has_client_num() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DBAgentInfoRsp::clear_client_num() {
  client_num_ = 0u;
  clear_has_client_num();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::client_num() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.client_num)
  return client_num_;
}
inline void DBAgentInfoRsp::set_client_num(::google::protobuf::uint32 value) {
  set_has_client_num();
  client_num_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.client_num)
}

// required uint32 queue_num = 8;
inline bool DBAgentInfoRsp::has_queue_num() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DBAgentInfoRsp::set_has_queue_num() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DBAgentInfoRsp::clear_has_queue_num() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DBAgentInfoRsp::clear_queue_num() {
  queue_num_ = 0u;
  clear_has_queue_num();
}
inline ::google::protobuf::uint32 DBAgentInfoRsp::queue_num() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentInfoRsp.queue_num)
  return queue_num_;
}
inline void DBAgentInfoRsp::set_queue_num(::google::protobuf::uint32 value) {
  set_has_queue_num();
  queue_num_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentInfoRsp.queue_num)
}

// -------------------------------------------------------------------

// QueryDBAgentReq

// required uint32 sequence = 1;
inline bool QueryDBAgentReq::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDBAgentReq::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDBAgentReq::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDBAgentReq::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 QueryDBAgentReq::sequence() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentReq.sequence)
  return sequence_;
}
inline void QueryDBAgentReq::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentReq.sequence)
}

// required .svr.QueryDBAgentReq.DatabaseType dbtype = 2;
inline bool QueryDBAgentReq::has_dbtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDBAgentReq::set_has_dbtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDBAgentReq::clear_has_dbtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDBAgentReq::clear_dbtype() {
  dbtype_ = 1;
  clear_has_dbtype();
}
inline ::svr::QueryDBAgentReq_DatabaseType QueryDBAgentReq::dbtype() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentReq.dbtype)
  return static_cast< ::svr::QueryDBAgentReq_DatabaseType >(dbtype_);
}
inline void QueryDBAgentReq::set_dbtype(::svr::QueryDBAgentReq_DatabaseType value) {
  assert(::svr::QueryDBAgentReq_DatabaseType_IsValid(value));
  set_has_dbtype();
  dbtype_ = value;
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentReq.dbtype)
}

// required .svr.QueryDBAgentReq.ActoinType action = 3;
inline bool QueryDBAgentReq::has_action() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void QueryDBAgentReq::set_has_action() {
  _has_bits_[0] |= 0x00000004u;
}
inline void QueryDBAgentReq::clear_has_action() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void QueryDBAgentReq::clear_action() {
  action_ = 1;
  clear_has_action();
}
inline ::svr::QueryDBAgentReq_ActoinType QueryDBAgentReq::action() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentReq.action)
  return static_cast< ::svr::QueryDBAgentReq_ActoinType >(action_);
}
inline void QueryDBAgentReq::set_action(::svr::QueryDBAgentReq_ActoinType value) {
  assert(::svr::QueryDBAgentReq_ActoinType_IsValid(value));
  set_has_action();
  action_ = value;
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentReq.action)
}

// required string dbname = 4;
inline bool QueryDBAgentReq::has_dbname() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void QueryDBAgentReq::set_has_dbname() {
  _has_bits_[0] |= 0x00000008u;
}
inline void QueryDBAgentReq::clear_has_dbname() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void QueryDBAgentReq::clear_dbname() {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_->clear();
  }
  clear_has_dbname();
}
inline const ::std::string& QueryDBAgentReq::dbname() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentReq.dbname)
  return *dbname_;
}
inline void QueryDBAgentReq::set_dbname(const ::std::string& value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentReq.dbname)
}
inline void QueryDBAgentReq::set_dbname(const char* value) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.QueryDBAgentReq.dbname)
}
inline void QueryDBAgentReq::set_dbname(const char* value, size_t size) {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  dbname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.QueryDBAgentReq.dbname)
}
inline ::std::string* QueryDBAgentReq::mutable_dbname() {
  set_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    dbname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.QueryDBAgentReq.dbname)
  return dbname_;
}
inline ::std::string* QueryDBAgentReq::release_dbname() {
  clear_has_dbname();
  if (dbname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = dbname_;
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryDBAgentReq::set_allocated_dbname(::std::string* dbname) {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (dbname) {
    set_has_dbname();
    dbname_ = dbname;
  } else {
    clear_has_dbname();
    dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.QueryDBAgentReq.dbname)
}

// optional string statement = 5;
inline bool QueryDBAgentReq::has_statement() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void QueryDBAgentReq::set_has_statement() {
  _has_bits_[0] |= 0x00000010u;
}
inline void QueryDBAgentReq::clear_has_statement() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void QueryDBAgentReq::clear_statement() {
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_->clear();
  }
  clear_has_statement();
}
inline const ::std::string& QueryDBAgentReq::statement() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentReq.statement)
  return *statement_;
}
inline void QueryDBAgentReq::set_statement(const ::std::string& value) {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  statement_->assign(value);
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentReq.statement)
}
inline void QueryDBAgentReq::set_statement(const char* value) {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  statement_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.QueryDBAgentReq.statement)
}
inline void QueryDBAgentReq::set_statement(const char* value, size_t size) {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  statement_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.QueryDBAgentReq.statement)
}
inline ::std::string* QueryDBAgentReq::mutable_statement() {
  set_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    statement_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.QueryDBAgentReq.statement)
  return statement_;
}
inline ::std::string* QueryDBAgentReq::release_statement() {
  clear_has_statement();
  if (statement_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = statement_;
    statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryDBAgentReq::set_allocated_statement(::std::string* statement) {
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statement_;
  }
  if (statement) {
    set_has_statement();
    statement_ = statement;
  } else {
    clear_has_statement();
    statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.QueryDBAgentReq.statement)
}

// -------------------------------------------------------------------

// QueryDBAgentRsp

// required uint32 sequence = 1;
inline bool QueryDBAgentRsp::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void QueryDBAgentRsp::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void QueryDBAgentRsp::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void QueryDBAgentRsp::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 QueryDBAgentRsp::sequence() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentRsp.sequence)
  return sequence_;
}
inline void QueryDBAgentRsp::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentRsp.sequence)
}

// optional string result = 2;
inline bool QueryDBAgentRsp::has_result() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void QueryDBAgentRsp::set_has_result() {
  _has_bits_[0] |= 0x00000002u;
}
inline void QueryDBAgentRsp::clear_has_result() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void QueryDBAgentRsp::clear_result() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_->clear();
  }
  clear_has_result();
}
inline const ::std::string& QueryDBAgentRsp::result() const {
  // @@protoc_insertion_point(field_get:svr.QueryDBAgentRsp.result)
  return *result_;
}
inline void QueryDBAgentRsp::set_result(const ::std::string& value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set:svr.QueryDBAgentRsp.result)
}
inline void QueryDBAgentRsp::set_result(const char* value) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.QueryDBAgentRsp.result)
}
inline void QueryDBAgentRsp::set_result(const char* value, size_t size) {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  result_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.QueryDBAgentRsp.result)
}
inline ::std::string* QueryDBAgentRsp::mutable_result() {
  set_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    result_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.QueryDBAgentRsp.result)
  return result_;
}
inline ::std::string* QueryDBAgentRsp::release_result() {
  clear_has_result();
  if (result_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = result_;
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void QueryDBAgentRsp::set_allocated_result(::std::string* result) {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (result) {
    set_has_result();
    result_ = result;
  } else {
    clear_has_result();
    result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.QueryDBAgentRsp.result)
}

// -------------------------------------------------------------------

// DBErrorRsp

// required uint32 sequence = 1;
inline bool DBErrorRsp::has_sequence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBErrorRsp::set_has_sequence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBErrorRsp::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBErrorRsp::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 DBErrorRsp::sequence() const {
  // @@protoc_insertion_point(field_get:svr.DBErrorRsp.sequence)
  return sequence_;
}
inline void DBErrorRsp::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:svr.DBErrorRsp.sequence)
}

// required int32 error_code = 2;
inline bool DBErrorRsp::has_error_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBErrorRsp::set_has_error_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBErrorRsp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBErrorRsp::clear_error_code() {
  error_code_ = 0;
  clear_has_error_code();
}
inline ::google::protobuf::int32 DBErrorRsp::error_code() const {
  // @@protoc_insertion_point(field_get:svr.DBErrorRsp.error_code)
  return error_code_;
}
inline void DBErrorRsp::set_error_code(::google::protobuf::int32 value) {
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:svr.DBErrorRsp.error_code)
}

// optional string what = 3;
inline bool DBErrorRsp::has_what() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DBErrorRsp::set_has_what() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DBErrorRsp::clear_has_what() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DBErrorRsp::clear_what() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& DBErrorRsp::what() const {
  // @@protoc_insertion_point(field_get:svr.DBErrorRsp.what)
  return *what_;
}
inline void DBErrorRsp::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(value);
  // @@protoc_insertion_point(field_set:svr.DBErrorRsp.what)
}
inline void DBErrorRsp::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.DBErrorRsp.what)
}
inline void DBErrorRsp::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.DBErrorRsp.what)
}
inline ::std::string* DBErrorRsp::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.DBErrorRsp.what)
  return what_;
}
inline ::std::string* DBErrorRsp::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DBErrorRsp::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.DBErrorRsp.what)
}

// -------------------------------------------------------------------

// DBAgentErrorRsp

// required .pub.ErrorCode error_code = 1;
inline bool DBAgentErrorRsp::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DBAgentErrorRsp::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DBAgentErrorRsp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DBAgentErrorRsp::clear_error_code() {
  error_code_ = 10001;
  clear_has_error_code();
}
inline ::pub::ErrorCode DBAgentErrorRsp::error_code() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentErrorRsp.error_code)
  return static_cast< ::pub::ErrorCode >(error_code_);
}
inline void DBAgentErrorRsp::set_error_code(::pub::ErrorCode value) {
  assert(::pub::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentErrorRsp.error_code)
}

// optional uint32 sequence = 2;
inline bool DBAgentErrorRsp::has_sequence() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DBAgentErrorRsp::set_has_sequence() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DBAgentErrorRsp::clear_has_sequence() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DBAgentErrorRsp::clear_sequence() {
  sequence_ = 0u;
  clear_has_sequence();
}
inline ::google::protobuf::uint32 DBAgentErrorRsp::sequence() const {
  // @@protoc_insertion_point(field_get:svr.DBAgentErrorRsp.sequence)
  return sequence_;
}
inline void DBAgentErrorRsp::set_sequence(::google::protobuf::uint32 value) {
  set_has_sequence();
  sequence_ = value;
  // @@protoc_insertion_point(field_set:svr.DBAgentErrorRsp.sequence)
}

// -------------------------------------------------------------------

// ChildNode

// required .svr.NodeType type = 1;
inline bool ChildNode::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ChildNode::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ChildNode::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ChildNode::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::svr::NodeType ChildNode::type() const {
  // @@protoc_insertion_point(field_get:svr.ChildNode.type)
  return static_cast< ::svr::NodeType >(type_);
}
inline void ChildNode::set_type(::svr::NodeType value) {
  assert(::svr::NodeType_IsValid(value));
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:svr.ChildNode.type)
}

// optional uint32 child_id = 2 [default = 1];
inline bool ChildNode::has_child_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ChildNode::set_has_child_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ChildNode::clear_has_child_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ChildNode::clear_child_id() {
  child_id_ = 1u;
  clear_has_child_id();
}
inline ::google::protobuf::uint32 ChildNode::child_id() const {
  // @@protoc_insertion_point(field_get:svr.ChildNode.child_id)
  return child_id_;
}
inline void ChildNode::set_child_id(::google::protobuf::uint32 value) {
  set_has_child_id();
  child_id_ = value;
  // @@protoc_insertion_point(field_set:svr.ChildNode.child_id)
}

// -------------------------------------------------------------------

// RouterErrorRsp

// required .pub.ErrorCode error_code = 1;
inline bool RouterErrorRsp::has_error_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouterErrorRsp::set_has_error_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouterErrorRsp::clear_has_error_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouterErrorRsp::clear_error_code() {
  error_code_ = 10001;
  clear_has_error_code();
}
inline ::pub::ErrorCode RouterErrorRsp::error_code() const {
  // @@protoc_insertion_point(field_get:svr.RouterErrorRsp.error_code)
  return static_cast< ::pub::ErrorCode >(error_code_);
}
inline void RouterErrorRsp::set_error_code(::pub::ErrorCode value) {
  assert(::pub::ErrorCode_IsValid(value));
  set_has_error_code();
  error_code_ = value;
  // @@protoc_insertion_point(field_set:svr.RouterErrorRsp.error_code)
}

// optional string what = 2;
inline bool RouterErrorRsp::has_what() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouterErrorRsp::set_has_what() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RouterErrorRsp::clear_has_what() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RouterErrorRsp::clear_what() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_->clear();
  }
  clear_has_what();
}
inline const ::std::string& RouterErrorRsp::what() const {
  // @@protoc_insertion_point(field_get:svr.RouterErrorRsp.what)
  return *what_;
}
inline void RouterErrorRsp::set_what(const ::std::string& value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(value);
  // @@protoc_insertion_point(field_set:svr.RouterErrorRsp.what)
}
inline void RouterErrorRsp::set_what(const char* value) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.RouterErrorRsp.what)
}
inline void RouterErrorRsp::set_what(const char* value, size_t size) {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  what_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.RouterErrorRsp.what)
}
inline ::std::string* RouterErrorRsp::mutable_what() {
  set_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    what_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.RouterErrorRsp.what)
  return what_;
}
inline ::std::string* RouterErrorRsp::release_what() {
  clear_has_what();
  if (what_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = what_;
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RouterErrorRsp::set_allocated_what(::std::string* what) {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (what) {
    set_has_what();
    what_ = what;
  } else {
    clear_has_what();
    what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.RouterErrorRsp.what)
}

// -------------------------------------------------------------------

// LoginRouterReq

// required .svr.ChildNode node = 1;
inline bool LoginRouterReq::has_node() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRouterReq::set_has_node() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRouterReq::clear_has_node() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRouterReq::clear_node() {
  if (node_ != NULL) node_->::svr::ChildNode::Clear();
  clear_has_node();
}
inline const ::svr::ChildNode& LoginRouterReq::node() const {
  // @@protoc_insertion_point(field_get:svr.LoginRouterReq.node)
  return node_ != NULL ? *node_ : *default_instance_->node_;
}
inline ::svr::ChildNode* LoginRouterReq::mutable_node() {
  set_has_node();
  if (node_ == NULL) node_ = new ::svr::ChildNode;
  // @@protoc_insertion_point(field_mutable:svr.LoginRouterReq.node)
  return node_;
}
inline ::svr::ChildNode* LoginRouterReq::release_node() {
  clear_has_node();
  ::svr::ChildNode* temp = node_;
  node_ = NULL;
  return temp;
}
inline void LoginRouterReq::set_allocated_node(::svr::ChildNode* node) {
  delete node_;
  node_ = node;
  if (node) {
    set_has_node();
  } else {
    clear_has_node();
  }
  // @@protoc_insertion_point(field_set_allocated:svr.LoginRouterReq.node)
}

// -------------------------------------------------------------------

// LoginRouterRsp

// required uint32 heartbeat_interval = 1;
inline bool LoginRouterRsp::has_heartbeat_interval() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LoginRouterRsp::set_has_heartbeat_interval() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LoginRouterRsp::clear_has_heartbeat_interval() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LoginRouterRsp::clear_heartbeat_interval() {
  heartbeat_interval_ = 0u;
  clear_has_heartbeat_interval();
}
inline ::google::protobuf::uint32 LoginRouterRsp::heartbeat_interval() const {
  // @@protoc_insertion_point(field_get:svr.LoginRouterRsp.heartbeat_interval)
  return heartbeat_interval_;
}
inline void LoginRouterRsp::set_heartbeat_interval(::google::protobuf::uint32 value) {
  set_has_heartbeat_interval();
  heartbeat_interval_ = value;
  // @@protoc_insertion_point(field_set:svr.LoginRouterRsp.heartbeat_interval)
}

// -------------------------------------------------------------------

// RouterInfoReq

// -------------------------------------------------------------------

// RouterInfoRsp

// required uint32 up_volume = 1;
inline bool RouterInfoRsp::has_up_volume() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouterInfoRsp::set_has_up_volume() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouterInfoRsp::clear_has_up_volume() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouterInfoRsp::clear_up_volume() {
  up_volume_ = 0u;
  clear_has_up_volume();
}
inline ::google::protobuf::uint32 RouterInfoRsp::up_volume() const {
  // @@protoc_insertion_point(field_get:svr.RouterInfoRsp.up_volume)
  return up_volume_;
}
inline void RouterInfoRsp::set_up_volume(::google::protobuf::uint32 value) {
  set_has_up_volume();
  up_volume_ = value;
  // @@protoc_insertion_point(field_set:svr.RouterInfoRsp.up_volume)
}

// required uint32 down_volume = 2;
inline bool RouterInfoRsp::has_down_volume() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouterInfoRsp::set_has_down_volume() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RouterInfoRsp::clear_has_down_volume() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RouterInfoRsp::clear_down_volume() {
  down_volume_ = 0u;
  clear_has_down_volume();
}
inline ::google::protobuf::uint32 RouterInfoRsp::down_volume() const {
  // @@protoc_insertion_point(field_get:svr.RouterInfoRsp.down_volume)
  return down_volume_;
}
inline void RouterInfoRsp::set_down_volume(::google::protobuf::uint32 value) {
  set_has_down_volume();
  down_volume_ = value;
  // @@protoc_insertion_point(field_set:svr.RouterInfoRsp.down_volume)
}

// repeated .svr.ChildNode node_lists = 3;
inline int RouterInfoRsp::node_lists_size() const {
  return node_lists_.size();
}
inline void RouterInfoRsp::clear_node_lists() {
  node_lists_.Clear();
}
inline const ::svr::ChildNode& RouterInfoRsp::node_lists(int index) const {
  // @@protoc_insertion_point(field_get:svr.RouterInfoRsp.node_lists)
  return node_lists_.Get(index);
}
inline ::svr::ChildNode* RouterInfoRsp::mutable_node_lists(int index) {
  // @@protoc_insertion_point(field_mutable:svr.RouterInfoRsp.node_lists)
  return node_lists_.Mutable(index);
}
inline ::svr::ChildNode* RouterInfoRsp::add_node_lists() {
  // @@protoc_insertion_point(field_add:svr.RouterInfoRsp.node_lists)
  return node_lists_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::svr::ChildNode >&
RouterInfoRsp::node_lists() const {
  // @@protoc_insertion_point(field_list:svr.RouterInfoRsp.node_lists)
  return node_lists_;
}
inline ::google::protobuf::RepeatedPtrField< ::svr::ChildNode >*
RouterInfoRsp::mutable_node_lists() {
  // @@protoc_insertion_point(field_mutable_list:svr.RouterInfoRsp.node_lists)
  return &node_lists_;
}

// -------------------------------------------------------------------

// ForwardReq

// required .svr.ChildNode dst = 1;
inline bool ForwardReq::has_dst() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ForwardReq::set_has_dst() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ForwardReq::clear_has_dst() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ForwardReq::clear_dst() {
  if (dst_ != NULL) dst_->::svr::ChildNode::Clear();
  clear_has_dst();
}
inline const ::svr::ChildNode& ForwardReq::dst() const {
  // @@protoc_insertion_point(field_get:svr.ForwardReq.dst)
  return dst_ != NULL ? *dst_ : *default_instance_->dst_;
}
inline ::svr::ChildNode* ForwardReq::mutable_dst() {
  set_has_dst();
  if (dst_ == NULL) dst_ = new ::svr::ChildNode;
  // @@protoc_insertion_point(field_mutable:svr.ForwardReq.dst)
  return dst_;
}
inline ::svr::ChildNode* ForwardReq::release_dst() {
  clear_has_dst();
  ::svr::ChildNode* temp = dst_;
  dst_ = NULL;
  return temp;
}
inline void ForwardReq::set_allocated_dst(::svr::ChildNode* dst) {
  delete dst_;
  dst_ = dst;
  if (dst) {
    set_has_dst();
  } else {
    clear_has_dst();
  }
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardReq.dst)
}

// required bytes user_data = 2;
inline bool ForwardReq::has_user_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ForwardReq::set_has_user_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ForwardReq::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ForwardReq::clear_user_data() {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_->clear();
  }
  clear_has_user_data();
}
inline const ::std::string& ForwardReq::user_data() const {
  // @@protoc_insertion_point(field_get:svr.ForwardReq.user_data)
  return *user_data_;
}
inline void ForwardReq::set_user_data(const ::std::string& value) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(value);
  // @@protoc_insertion_point(field_set:svr.ForwardReq.user_data)
}
inline void ForwardReq::set_user_data(const char* value) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.ForwardReq.user_data)
}
inline void ForwardReq::set_user_data(const void* value, size_t size) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.ForwardReq.user_data)
}
inline ::std::string* ForwardReq::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.ForwardReq.user_data)
  return user_data_;
}
inline ::std::string* ForwardReq::release_user_data() {
  clear_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_data_;
    user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ForwardReq::set_allocated_user_data(::std::string* user_data) {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (user_data) {
    set_has_user_data();
    user_data_ = user_data;
  } else {
    clear_has_user_data();
    user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.ForwardReq.user_data)
}

// -------------------------------------------------------------------

// BroadcastReq

// repeated .svr.NodeType dst_lists = 1;
inline int BroadcastReq::dst_lists_size() const {
  return dst_lists_.size();
}
inline void BroadcastReq::clear_dst_lists() {
  dst_lists_.Clear();
}
inline ::svr::NodeType BroadcastReq::dst_lists(int index) const {
  // @@protoc_insertion_point(field_get:svr.BroadcastReq.dst_lists)
  return static_cast< ::svr::NodeType >(dst_lists_.Get(index));
}
inline void BroadcastReq::set_dst_lists(int index, ::svr::NodeType value) {
  assert(::svr::NodeType_IsValid(value));
  dst_lists_.Set(index, value);
  // @@protoc_insertion_point(field_set:svr.BroadcastReq.dst_lists)
}
inline void BroadcastReq::add_dst_lists(::svr::NodeType value) {
  assert(::svr::NodeType_IsValid(value));
  dst_lists_.Add(value);
  // @@protoc_insertion_point(field_add:svr.BroadcastReq.dst_lists)
}
inline const ::google::protobuf::RepeatedField<int>&
BroadcastReq::dst_lists() const {
  // @@protoc_insertion_point(field_list:svr.BroadcastReq.dst_lists)
  return dst_lists_;
}
inline ::google::protobuf::RepeatedField<int>*
BroadcastReq::mutable_dst_lists() {
  // @@protoc_insertion_point(field_mutable_list:svr.BroadcastReq.dst_lists)
  return &dst_lists_;
}

// required bytes user_data = 2;
inline bool BroadcastReq::has_user_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BroadcastReq::set_has_user_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BroadcastReq::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BroadcastReq::clear_user_data() {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_->clear();
  }
  clear_has_user_data();
}
inline const ::std::string& BroadcastReq::user_data() const {
  // @@protoc_insertion_point(field_get:svr.BroadcastReq.user_data)
  return *user_data_;
}
inline void BroadcastReq::set_user_data(const ::std::string& value) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(value);
  // @@protoc_insertion_point(field_set:svr.BroadcastReq.user_data)
}
inline void BroadcastReq::set_user_data(const char* value) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.BroadcastReq.user_data)
}
inline void BroadcastReq::set_user_data(const void* value, size_t size) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.BroadcastReq.user_data)
}
inline ::std::string* BroadcastReq::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.BroadcastReq.user_data)
  return user_data_;
}
inline ::std::string* BroadcastReq::release_user_data() {
  clear_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_data_;
    user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BroadcastReq::set_allocated_user_data(::std::string* user_data) {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (user_data) {
    set_has_user_data();
    user_data_ = user_data;
  } else {
    clear_has_user_data();
    user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.BroadcastReq.user_data)
}

// -------------------------------------------------------------------

// RouterNotify

// required .svr.ChildNode src = 1;
inline bool RouterNotify::has_src() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouterNotify::set_has_src() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouterNotify::clear_has_src() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouterNotify::clear_src() {
  if (src_ != NULL) src_->::svr::ChildNode::Clear();
  clear_has_src();
}
inline const ::svr::ChildNode& RouterNotify::src() const {
  // @@protoc_insertion_point(field_get:svr.RouterNotify.src)
  return src_ != NULL ? *src_ : *default_instance_->src_;
}
inline ::svr::ChildNode* RouterNotify::mutable_src() {
  set_has_src();
  if (src_ == NULL) src_ = new ::svr::ChildNode;
  // @@protoc_insertion_point(field_mutable:svr.RouterNotify.src)
  return src_;
}
inline ::svr::ChildNode* RouterNotify::release_src() {
  clear_has_src();
  ::svr::ChildNode* temp = src_;
  src_ = NULL;
  return temp;
}
inline void RouterNotify::set_allocated_src(::svr::ChildNode* src) {
  delete src_;
  src_ = src;
  if (src) {
    set_has_src();
  } else {
    clear_has_src();
  }
  // @@protoc_insertion_point(field_set_allocated:svr.RouterNotify.src)
}

// required bytes user_data = 2;
inline bool RouterNotify::has_user_data() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouterNotify::set_has_user_data() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RouterNotify::clear_has_user_data() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RouterNotify::clear_user_data() {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_->clear();
  }
  clear_has_user_data();
}
inline const ::std::string& RouterNotify::user_data() const {
  // @@protoc_insertion_point(field_get:svr.RouterNotify.user_data)
  return *user_data_;
}
inline void RouterNotify::set_user_data(const ::std::string& value) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(value);
  // @@protoc_insertion_point(field_set:svr.RouterNotify.user_data)
}
inline void RouterNotify::set_user_data(const char* value) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(value);
  // @@protoc_insertion_point(field_set_char:svr.RouterNotify.user_data)
}
inline void RouterNotify::set_user_data(const void* value, size_t size) {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  user_data_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:svr.RouterNotify.user_data)
}
inline ::std::string* RouterNotify::mutable_user_data() {
  set_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    user_data_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:svr.RouterNotify.user_data)
  return user_data_;
}
inline ::std::string* RouterNotify::release_user_data() {
  clear_has_user_data();
  if (user_data_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = user_data_;
    user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RouterNotify::set_allocated_user_data(::std::string* user_data) {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (user_data) {
    set_has_user_data();
    user_data_ = user_data;
  } else {
    clear_has_user_data();
    user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:svr.RouterNotify.user_data)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svr

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::svr::QueryDBAgentReq_ActoinType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svr::QueryDBAgentReq_ActoinType>() {
  return ::svr::QueryDBAgentReq_ActoinType_descriptor();
}
template <> struct is_proto_enum< ::svr::QueryDBAgentReq_DatabaseType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svr::QueryDBAgentReq_DatabaseType>() {
  return ::svr::QueryDBAgentReq_DatabaseType_descriptor();
}
template <> struct is_proto_enum< ::svr::NodeType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::svr::NodeType>() {
  return ::svr::NodeType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fserver_5finternal_2eproto__INCLUDED
