// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/server_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/server_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace svr {

namespace {

const ::google::protobuf::Descriptor* LoginDBAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDBAgentReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginDBAgentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginDBAgentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAgentInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAgentInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAgentInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAgentInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* QueryDBAgentReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDBAgentReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_ActoinType_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_DatabaseType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QueryDBAgentRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QueryDBAgentRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBErrorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAgentErrorRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAgentErrorRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChildNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChildNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRouterReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRouterReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LoginRouterRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LoginRouterRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterInfoReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterInfoReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterInfoRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterInfoRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ForwardReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ForwardReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* BroadcastReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BroadcastReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouterNotify_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouterNotify_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkerLoginReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkerLoginReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinkerLoginRsp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinkerLoginRsp_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateLinkerCapacityReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateLinkerCapacityReq_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateUserTokenReq_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateUserTokenReq_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fserver_5finternal_2eproto() {
  protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/server_internal.proto");
  GOOGLE_CHECK(file != NULL);
  LoginDBAgentReq_descriptor_ = file->message_type(0);
  static const int LoginDBAgentReq_offsets_[1] = {
  };
  LoginDBAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDBAgentReq_descriptor_,
      LoginDBAgentReq::default_instance_,
      LoginDBAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDBAgentReq));
  LoginDBAgentRsp_descriptor_ = file->message_type(1);
  static const int LoginDBAgentRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentRsp, heartbeat_interval_),
  };
  LoginDBAgentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginDBAgentRsp_descriptor_,
      LoginDBAgentRsp::default_instance_,
      LoginDBAgentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginDBAgentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginDBAgentRsp));
  DBAgentInfoReq_descriptor_ = file->message_type(2);
  static const int DBAgentInfoReq_offsets_[1] = {
  };
  DBAgentInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAgentInfoReq_descriptor_,
      DBAgentInfoReq::default_instance_,
      DBAgentInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAgentInfoReq));
  DBAgentInfoRsp_descriptor_ = file->message_type(3);
  static const int DBAgentInfoRsp_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, up_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, down_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_select_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_insert_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_update_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, handle_delete_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, client_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, queue_num_),
  };
  DBAgentInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAgentInfoRsp_descriptor_,
      DBAgentInfoRsp::default_instance_,
      DBAgentInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAgentInfoRsp));
  QueryDBAgentReq_descriptor_ = file->message_type(4);
  static const int QueryDBAgentReq_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, dbtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, action_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, dbname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, statement_),
  };
  QueryDBAgentReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDBAgentReq_descriptor_,
      QueryDBAgentReq::default_instance_,
      QueryDBAgentReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDBAgentReq));
  QueryDBAgentReq_ActoinType_descriptor_ = QueryDBAgentReq_descriptor_->enum_type(0);
  QueryDBAgentReq_DatabaseType_descriptor_ = QueryDBAgentReq_descriptor_->enum_type(1);
  QueryDBAgentRsp_descriptor_ = file->message_type(5);
  static const int QueryDBAgentRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, result_),
  };
  QueryDBAgentRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QueryDBAgentRsp_descriptor_,
      QueryDBAgentRsp::default_instance_,
      QueryDBAgentRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QueryDBAgentRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QueryDBAgentRsp));
  DBErrorRsp_descriptor_ = file->message_type(6);
  static const int DBErrorRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, sequence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, what_),
  };
  DBErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBErrorRsp_descriptor_,
      DBErrorRsp::default_instance_,
      DBErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBErrorRsp));
  DBAgentErrorRsp_descriptor_ = file->message_type(7);
  static const int DBAgentErrorRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, error_code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, sequence_),
  };
  DBAgentErrorRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAgentErrorRsp_descriptor_,
      DBAgentErrorRsp::default_instance_,
      DBAgentErrorRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAgentErrorRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAgentErrorRsp));
  ChildNode_descriptor_ = file->message_type(8);
  static const int ChildNode_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildNode, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildNode, child_id_),
  };
  ChildNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChildNode_descriptor_,
      ChildNode::default_instance_,
      ChildNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChildNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChildNode));
  LoginRouterReq_descriptor_ = file->message_type(9);
  static const int LoginRouterReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, node_),
  };
  LoginRouterReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRouterReq_descriptor_,
      LoginRouterReq::default_instance_,
      LoginRouterReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRouterReq));
  LoginRouterRsp_descriptor_ = file->message_type(10);
  static const int LoginRouterRsp_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterRsp, heartbeat_interval_),
  };
  LoginRouterRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LoginRouterRsp_descriptor_,
      LoginRouterRsp::default_instance_,
      LoginRouterRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRouterRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LoginRouterRsp));
  RouterInfoReq_descriptor_ = file->message_type(11);
  static const int RouterInfoReq_offsets_[1] = {
  };
  RouterInfoReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouterInfoReq_descriptor_,
      RouterInfoReq::default_instance_,
      RouterInfoReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouterInfoReq));
  RouterInfoRsp_descriptor_ = file->message_type(12);
  static const int RouterInfoRsp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, up_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, down_volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, node_lists_),
  };
  RouterInfoRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouterInfoRsp_descriptor_,
      RouterInfoRsp::default_instance_,
      RouterInfoRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterInfoRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouterInfoRsp));
  ForwardReq_descriptor_ = file->message_type(13);
  static const int ForwardReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardReq, dst_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardReq, user_data_),
  };
  ForwardReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ForwardReq_descriptor_,
      ForwardReq::default_instance_,
      ForwardReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ForwardReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ForwardReq));
  BroadcastReq_descriptor_ = file->message_type(14);
  static const int BroadcastReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastReq, dst_lists_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastReq, user_data_),
  };
  BroadcastReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BroadcastReq_descriptor_,
      BroadcastReq::default_instance_,
      BroadcastReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BroadcastReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BroadcastReq));
  RouterNotify_descriptor_ = file->message_type(15);
  static const int RouterNotify_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterNotify, src_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterNotify, user_data_),
  };
  RouterNotify_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouterNotify_descriptor_,
      RouterNotify::default_instance_,
      RouterNotify_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterNotify, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouterNotify, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouterNotify));
  LinkerLoginReq_descriptor_ = file->message_type(16);
  static const int LinkerLoginReq_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginReq, partition_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginReq, public_ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginReq, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginReq, linker_id_),
  };
  LinkerLoginReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkerLoginReq_descriptor_,
      LinkerLoginReq::default_instance_,
      LinkerLoginReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkerLoginReq));
  LinkerLoginRsp_descriptor_ = file->message_type(17);
  static const int LinkerLoginRsp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginRsp, heartbeat_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginRsp, linker_id_),
  };
  LinkerLoginRsp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinkerLoginRsp_descriptor_,
      LinkerLoginRsp::default_instance_,
      LinkerLoginRsp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginRsp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinkerLoginRsp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinkerLoginRsp));
  UpdateLinkerCapacityReq_descriptor_ = file->message_type(18);
  static const int UpdateLinkerCapacityReq_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateLinkerCapacityReq, load_),
  };
  UpdateLinkerCapacityReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateLinkerCapacityReq_descriptor_,
      UpdateLinkerCapacityReq::default_instance_,
      UpdateLinkerCapacityReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateLinkerCapacityReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateLinkerCapacityReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateLinkerCapacityReq));
  UpdateUserTokenReq_descriptor_ = file->message_type(19);
  static const int UpdateUserTokenReq_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserTokenReq, user_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserTokenReq, token_),
  };
  UpdateUserTokenReq_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateUserTokenReq_descriptor_,
      UpdateUserTokenReq::default_instance_,
      UpdateUserTokenReq_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserTokenReq, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateUserTokenReq, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateUserTokenReq));
  NodeType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fserver_5finternal_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDBAgentReq_descriptor_, &LoginDBAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginDBAgentRsp_descriptor_, &LoginDBAgentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAgentInfoReq_descriptor_, &DBAgentInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAgentInfoRsp_descriptor_, &DBAgentInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDBAgentReq_descriptor_, &QueryDBAgentReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QueryDBAgentRsp_descriptor_, &QueryDBAgentRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBErrorRsp_descriptor_, &DBErrorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAgentErrorRsp_descriptor_, &DBAgentErrorRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChildNode_descriptor_, &ChildNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRouterReq_descriptor_, &LoginRouterReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LoginRouterRsp_descriptor_, &LoginRouterRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouterInfoReq_descriptor_, &RouterInfoReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouterInfoRsp_descriptor_, &RouterInfoRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ForwardReq_descriptor_, &ForwardReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BroadcastReq_descriptor_, &BroadcastReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouterNotify_descriptor_, &RouterNotify::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkerLoginReq_descriptor_, &LinkerLoginReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinkerLoginRsp_descriptor_, &LinkerLoginRsp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateLinkerCapacityReq_descriptor_, &UpdateLinkerCapacityReq::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateUserTokenReq_descriptor_, &UpdateUserTokenReq::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto() {
  delete LoginDBAgentReq::default_instance_;
  delete LoginDBAgentReq_reflection_;
  delete LoginDBAgentRsp::default_instance_;
  delete LoginDBAgentRsp_reflection_;
  delete DBAgentInfoReq::default_instance_;
  delete DBAgentInfoReq_reflection_;
  delete DBAgentInfoRsp::default_instance_;
  delete DBAgentInfoRsp_reflection_;
  delete QueryDBAgentReq::default_instance_;
  delete QueryDBAgentReq_reflection_;
  delete QueryDBAgentRsp::default_instance_;
  delete QueryDBAgentRsp_reflection_;
  delete DBErrorRsp::default_instance_;
  delete DBErrorRsp_reflection_;
  delete DBAgentErrorRsp::default_instance_;
  delete DBAgentErrorRsp_reflection_;
  delete ChildNode::default_instance_;
  delete ChildNode_reflection_;
  delete LoginRouterReq::default_instance_;
  delete LoginRouterReq_reflection_;
  delete LoginRouterRsp::default_instance_;
  delete LoginRouterRsp_reflection_;
  delete RouterInfoReq::default_instance_;
  delete RouterInfoReq_reflection_;
  delete RouterInfoRsp::default_instance_;
  delete RouterInfoRsp_reflection_;
  delete ForwardReq::default_instance_;
  delete ForwardReq_reflection_;
  delete BroadcastReq::default_instance_;
  delete BroadcastReq_reflection_;
  delete RouterNotify::default_instance_;
  delete RouterNotify_reflection_;
  delete LinkerLoginReq::default_instance_;
  delete LinkerLoginReq_reflection_;
  delete LinkerLoginRsp::default_instance_;
  delete LinkerLoginRsp_reflection_;
  delete UpdateLinkerCapacityReq::default_instance_;
  delete UpdateLinkerCapacityReq_reflection_;
  delete UpdateUserTokenReq::default_instance_;
  delete UpdateUserTokenReq_reflection_;
}

void protobuf_AddDesc_proto_2fserver_5finternal_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::pub::protobuf_AddDesc_proto_2fpublic_5fenum_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\033proto/server_internal.proto\022\003svr\032\027prot"
    "o/public_enum.proto\"\021\n\017LoginDBAgentReq\"-"
    "\n\017LoginDBAgentRsp\022\032\n\022heartbeat_interval\030"
    "\001 \002(\r\"\020\n\016DBAgentInfoReq\"\323\001\n\016DBAgentInfoR"
    "sp\022\021\n\tup_volume\030\001 \002(\r\022\023\n\013down_volume\030\002 \002"
    "(\r\022\033\n\023handle_select_count\030\003 \002(\r\022\033\n\023handl"
    "e_insert_count\030\004 \002(\r\022\033\n\023handle_update_co"
    "unt\030\005 \002(\r\022\033\n\023handle_delete_count\030\006 \002(\r\022\022"
    "\n\nclient_num\030\007 \002(\r\022\021\n\tqueue_num\030\010 \002(\r\"\224\002"
    "\n\017QueryDBAgentReq\022\020\n\010sequence\030\001 \002(\r\0221\n\006d"
    "btype\030\002 \002(\0162!.svr.QueryDBAgentReq.Databa"
    "seType\022/\n\006action\030\003 \002(\0162\037.svr.QueryDBAgen"
    "tReq.ActoinType\022\016\n\006dbname\030\004 \002(\t\022\021\n\tstate"
    "ment\030\005 \001(\t\"@\n\nActoinType\022\013\n\007kSelect\020\001\022\013\n"
    "\007kInsert\020\002\022\013\n\007kUpdate\020\003\022\013\n\007kDelete\020\004\"&\n\014"
    "DatabaseType\022\n\n\006kRedis\020\001\022\n\n\006kMySQL\020\002\"3\n\017"
    "QueryDBAgentRsp\022\020\n\010sequence\030\001 \002(\r\022\016\n\006res"
    "ult\030\002 \001(\014\"@\n\nDBErrorRsp\022\020\n\010sequence\030\001 \002("
    "\r\022\022\n\nerror_code\030\002 \002(\005\022\014\n\004what\030\003 \001(\t\"G\n\017D"
    "BAgentErrorRsp\022\"\n\nerror_code\030\001 \002(\0162\016.pub"
    ".ErrorCode\022\020\n\010sequence\030\002 \001(\r\"=\n\tChildNod"
    "e\022\033\n\004type\030\001 \002(\0162\r.svr.NodeType\022\023\n\010child_"
    "id\030\002 \001(\r:\0011\".\n\016LoginRouterReq\022\034\n\004node\030\001 "
    "\002(\0132\016.svr.ChildNode\",\n\016LoginRouterRsp\022\032\n"
    "\022heartbeat_interval\030\001 \002(\r\"\017\n\rRouterInfoR"
    "eq\"[\n\rRouterInfoRsp\022\021\n\tup_volume\030\001 \002(\r\022\023"
    "\n\013down_volume\030\002 \002(\r\022\"\n\nnode_lists\030\003 \003(\0132"
    "\016.svr.ChildNode\"<\n\nForwardReq\022\033\n\003dst\030\001 \002"
    "(\0132\016.svr.ChildNode\022\021\n\tuser_data\030\002 \002(\014\"C\n"
    "\014BroadcastReq\022 \n\tdst_lists\030\001 \003(\0162\r.svr.N"
    "odeType\022\021\n\tuser_data\030\002 \002(\014\">\n\014RouterNoti"
    "fy\022\033\n\003src\030\001 \002(\0132\016.svr.ChildNode\022\021\n\tuser_"
    "data\030\002 \002(\014\"Z\n\016LinkerLoginReq\022\024\n\014partitio"
    "n_id\030\001 \002(\r\022\021\n\tpublic_ip\030\002 \002(\t\022\014\n\004port\030\003 "
    "\002(\r\022\021\n\tlinker_id\030\004 \001(\r\"\?\n\016LinkerLoginRsp"
    "\022\032\n\022heartbeat_interval\030\001 \002(\r\022\021\n\tlinker_i"
    "d\030\002 \002(\r\"\'\n\027UpdateLinkerCapacityReq\022\014\n\004lo"
    "ad\030\001 \002(\r\"4\n\022UpdateUserTokenReq\022\017\n\007user_i"
    "d\030\001 \002(\r\022\r\n\005token\030\002 \002(\004*D\n\010NodeType\022\020\n\014kL"
    "oginServer\020\001\022\021\n\rkLinkerServer\020\002\022\023\n\017kMain"
    "LogicSever\020\003", 1612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/server_internal.proto", &protobuf_RegisterTypes);
  LoginDBAgentReq::default_instance_ = new LoginDBAgentReq();
  LoginDBAgentRsp::default_instance_ = new LoginDBAgentRsp();
  DBAgentInfoReq::default_instance_ = new DBAgentInfoReq();
  DBAgentInfoRsp::default_instance_ = new DBAgentInfoRsp();
  QueryDBAgentReq::default_instance_ = new QueryDBAgentReq();
  QueryDBAgentRsp::default_instance_ = new QueryDBAgentRsp();
  DBErrorRsp::default_instance_ = new DBErrorRsp();
  DBAgentErrorRsp::default_instance_ = new DBAgentErrorRsp();
  ChildNode::default_instance_ = new ChildNode();
  LoginRouterReq::default_instance_ = new LoginRouterReq();
  LoginRouterRsp::default_instance_ = new LoginRouterRsp();
  RouterInfoReq::default_instance_ = new RouterInfoReq();
  RouterInfoRsp::default_instance_ = new RouterInfoRsp();
  ForwardReq::default_instance_ = new ForwardReq();
  BroadcastReq::default_instance_ = new BroadcastReq();
  RouterNotify::default_instance_ = new RouterNotify();
  LinkerLoginReq::default_instance_ = new LinkerLoginReq();
  LinkerLoginRsp::default_instance_ = new LinkerLoginRsp();
  UpdateLinkerCapacityReq::default_instance_ = new UpdateLinkerCapacityReq();
  UpdateUserTokenReq::default_instance_ = new UpdateUserTokenReq();
  LoginDBAgentReq::default_instance_->InitAsDefaultInstance();
  LoginDBAgentRsp::default_instance_->InitAsDefaultInstance();
  DBAgentInfoReq::default_instance_->InitAsDefaultInstance();
  DBAgentInfoRsp::default_instance_->InitAsDefaultInstance();
  QueryDBAgentReq::default_instance_->InitAsDefaultInstance();
  QueryDBAgentRsp::default_instance_->InitAsDefaultInstance();
  DBErrorRsp::default_instance_->InitAsDefaultInstance();
  DBAgentErrorRsp::default_instance_->InitAsDefaultInstance();
  ChildNode::default_instance_->InitAsDefaultInstance();
  LoginRouterReq::default_instance_->InitAsDefaultInstance();
  LoginRouterRsp::default_instance_->InitAsDefaultInstance();
  RouterInfoReq::default_instance_->InitAsDefaultInstance();
  RouterInfoRsp::default_instance_->InitAsDefaultInstance();
  ForwardReq::default_instance_->InitAsDefaultInstance();
  BroadcastReq::default_instance_->InitAsDefaultInstance();
  RouterNotify::default_instance_->InitAsDefaultInstance();
  LinkerLoginReq::default_instance_->InitAsDefaultInstance();
  LinkerLoginRsp::default_instance_->InitAsDefaultInstance();
  UpdateLinkerCapacityReq::default_instance_->InitAsDefaultInstance();
  UpdateUserTokenReq::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fserver_5finternal_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fserver_5finternal_2eproto {
  StaticDescriptorInitializer_proto_2fserver_5finternal_2eproto() {
    protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  }
} static_descriptor_initializer_proto_2fserver_5finternal_2eproto_;
const ::google::protobuf::EnumDescriptor* NodeType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeType_descriptor_;
}
bool NodeType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

LoginDBAgentReq::LoginDBAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.LoginDBAgentReq)
}

void LoginDBAgentReq::InitAsDefaultInstance() {
}

LoginDBAgentReq::LoginDBAgentReq(const LoginDBAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.LoginDBAgentReq)
}

void LoginDBAgentReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDBAgentReq::~LoginDBAgentReq() {
  // @@protoc_insertion_point(destructor:svr.LoginDBAgentReq)
  SharedDtor();
}

void LoginDBAgentReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginDBAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDBAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDBAgentReq_descriptor_;
}

const LoginDBAgentReq& LoginDBAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

LoginDBAgentReq* LoginDBAgentReq::default_instance_ = NULL;

LoginDBAgentReq* LoginDBAgentReq::New() const {
  return new LoginDBAgentReq;
}

void LoginDBAgentReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDBAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.LoginDBAgentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svr.LoginDBAgentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.LoginDBAgentReq)
  return false;
#undef DO_
}

void LoginDBAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.LoginDBAgentReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.LoginDBAgentReq)
}

::google::protobuf::uint8* LoginDBAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.LoginDBAgentReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.LoginDBAgentReq)
  return target;
}

int LoginDBAgentReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDBAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDBAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDBAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDBAgentReq::MergeFrom(const LoginDBAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDBAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDBAgentReq::CopyFrom(const LoginDBAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDBAgentReq::IsInitialized() const {

  return true;
}

void LoginDBAgentReq::Swap(LoginDBAgentReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDBAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDBAgentReq_descriptor_;
  metadata.reflection = LoginDBAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginDBAgentRsp::kHeartbeatIntervalFieldNumber;
#endif  // !_MSC_VER

LoginDBAgentRsp::LoginDBAgentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.LoginDBAgentRsp)
}

void LoginDBAgentRsp::InitAsDefaultInstance() {
}

LoginDBAgentRsp::LoginDBAgentRsp(const LoginDBAgentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.LoginDBAgentRsp)
}

void LoginDBAgentRsp::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginDBAgentRsp::~LoginDBAgentRsp() {
  // @@protoc_insertion_point(destructor:svr.LoginDBAgentRsp)
  SharedDtor();
}

void LoginDBAgentRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginDBAgentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginDBAgentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginDBAgentRsp_descriptor_;
}

const LoginDBAgentRsp& LoginDBAgentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

LoginDBAgentRsp* LoginDBAgentRsp::default_instance_ = NULL;

LoginDBAgentRsp* LoginDBAgentRsp::New() const {
  return new LoginDBAgentRsp;
}

void LoginDBAgentRsp::Clear() {
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginDBAgentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.LoginDBAgentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heartbeat_interval = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_)));
          set_has_heartbeat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.LoginDBAgentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.LoginDBAgentRsp)
  return false;
#undef DO_
}

void LoginDBAgentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.LoginDBAgentRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heartbeat_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.LoginDBAgentRsp)
}

::google::protobuf::uint8* LoginDBAgentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.LoginDBAgentRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heartbeat_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.LoginDBAgentRsp)
  return target;
}

int LoginDBAgentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heartbeat_interval = 1;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginDBAgentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginDBAgentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginDBAgentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginDBAgentRsp::MergeFrom(const LoginDBAgentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_interval()) {
      set_heartbeat_interval(from.heartbeat_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginDBAgentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginDBAgentRsp::CopyFrom(const LoginDBAgentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginDBAgentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginDBAgentRsp::Swap(LoginDBAgentRsp* other) {
  if (other != this) {
    std::swap(heartbeat_interval_, other->heartbeat_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginDBAgentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginDBAgentRsp_descriptor_;
  metadata.reflection = LoginDBAgentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

DBAgentInfoReq::DBAgentInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.DBAgentInfoReq)
}

void DBAgentInfoReq::InitAsDefaultInstance() {
}

DBAgentInfoReq::DBAgentInfoReq(const DBAgentInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.DBAgentInfoReq)
}

void DBAgentInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAgentInfoReq::~DBAgentInfoReq() {
  // @@protoc_insertion_point(destructor:svr.DBAgentInfoReq)
  SharedDtor();
}

void DBAgentInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAgentInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAgentInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAgentInfoReq_descriptor_;
}

const DBAgentInfoReq& DBAgentInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

DBAgentInfoReq* DBAgentInfoReq::default_instance_ = NULL;

DBAgentInfoReq* DBAgentInfoReq::New() const {
  return new DBAgentInfoReq;
}

void DBAgentInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAgentInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.DBAgentInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svr.DBAgentInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.DBAgentInfoReq)
  return false;
#undef DO_
}

void DBAgentInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.DBAgentInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.DBAgentInfoReq)
}

::google::protobuf::uint8* DBAgentInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.DBAgentInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.DBAgentInfoReq)
  return target;
}

int DBAgentInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAgentInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAgentInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAgentInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAgentInfoReq::MergeFrom(const DBAgentInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAgentInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAgentInfoReq::CopyFrom(const DBAgentInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAgentInfoReq::IsInitialized() const {

  return true;
}

void DBAgentInfoReq::Swap(DBAgentInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAgentInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAgentInfoReq_descriptor_;
  metadata.reflection = DBAgentInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAgentInfoRsp::kUpVolumeFieldNumber;
const int DBAgentInfoRsp::kDownVolumeFieldNumber;
const int DBAgentInfoRsp::kHandleSelectCountFieldNumber;
const int DBAgentInfoRsp::kHandleInsertCountFieldNumber;
const int DBAgentInfoRsp::kHandleUpdateCountFieldNumber;
const int DBAgentInfoRsp::kHandleDeleteCountFieldNumber;
const int DBAgentInfoRsp::kClientNumFieldNumber;
const int DBAgentInfoRsp::kQueueNumFieldNumber;
#endif  // !_MSC_VER

DBAgentInfoRsp::DBAgentInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.DBAgentInfoRsp)
}

void DBAgentInfoRsp::InitAsDefaultInstance() {
}

DBAgentInfoRsp::DBAgentInfoRsp(const DBAgentInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.DBAgentInfoRsp)
}

void DBAgentInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  up_volume_ = 0u;
  down_volume_ = 0u;
  handle_select_count_ = 0u;
  handle_insert_count_ = 0u;
  handle_update_count_ = 0u;
  handle_delete_count_ = 0u;
  client_num_ = 0u;
  queue_num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAgentInfoRsp::~DBAgentInfoRsp() {
  // @@protoc_insertion_point(destructor:svr.DBAgentInfoRsp)
  SharedDtor();
}

void DBAgentInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAgentInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAgentInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAgentInfoRsp_descriptor_;
}

const DBAgentInfoRsp& DBAgentInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

DBAgentInfoRsp* DBAgentInfoRsp::default_instance_ = NULL;

DBAgentInfoRsp* DBAgentInfoRsp::New() const {
  return new DBAgentInfoRsp;
}

void DBAgentInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBAgentInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(up_volume_, queue_num_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAgentInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.DBAgentInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 up_volume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_volume_)));
          set_has_up_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down_volume;
        break;
      }

      // required uint32 down_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_down_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_volume_)));
          set_has_down_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_handle_select_count;
        break;
      }

      // required uint32 handle_select_count = 3;
      case 3: {
        if (tag == 24) {
         parse_handle_select_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_select_count_)));
          set_has_handle_select_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_handle_insert_count;
        break;
      }

      // required uint32 handle_insert_count = 4;
      case 4: {
        if (tag == 32) {
         parse_handle_insert_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_insert_count_)));
          set_has_handle_insert_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_handle_update_count;
        break;
      }

      // required uint32 handle_update_count = 5;
      case 5: {
        if (tag == 40) {
         parse_handle_update_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_update_count_)));
          set_has_handle_update_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_handle_delete_count;
        break;
      }

      // required uint32 handle_delete_count = 6;
      case 6: {
        if (tag == 48) {
         parse_handle_delete_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &handle_delete_count_)));
          set_has_handle_delete_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_client_num;
        break;
      }

      // required uint32 client_num = 7;
      case 7: {
        if (tag == 56) {
         parse_client_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &client_num_)));
          set_has_client_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_queue_num;
        break;
      }

      // required uint32 queue_num = 8;
      case 8: {
        if (tag == 64) {
         parse_queue_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &queue_num_)));
          set_has_queue_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.DBAgentInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.DBAgentInfoRsp)
  return false;
#undef DO_
}

void DBAgentInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.DBAgentInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->up_volume(), output);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->down_volume(), output);
  }

  // required uint32 handle_select_count = 3;
  if (has_handle_select_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->handle_select_count(), output);
  }

  // required uint32 handle_insert_count = 4;
  if (has_handle_insert_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->handle_insert_count(), output);
  }

  // required uint32 handle_update_count = 5;
  if (has_handle_update_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->handle_update_count(), output);
  }

  // required uint32 handle_delete_count = 6;
  if (has_handle_delete_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->handle_delete_count(), output);
  }

  // required uint32 client_num = 7;
  if (has_client_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->client_num(), output);
  }

  // required uint32 queue_num = 8;
  if (has_queue_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->queue_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.DBAgentInfoRsp)
}

::google::protobuf::uint8* DBAgentInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.DBAgentInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->up_volume(), target);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->down_volume(), target);
  }

  // required uint32 handle_select_count = 3;
  if (has_handle_select_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->handle_select_count(), target);
  }

  // required uint32 handle_insert_count = 4;
  if (has_handle_insert_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->handle_insert_count(), target);
  }

  // required uint32 handle_update_count = 5;
  if (has_handle_update_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->handle_update_count(), target);
  }

  // required uint32 handle_delete_count = 6;
  if (has_handle_delete_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->handle_delete_count(), target);
  }

  // required uint32 client_num = 7;
  if (has_client_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->client_num(), target);
  }

  // required uint32 queue_num = 8;
  if (has_queue_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->queue_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.DBAgentInfoRsp)
  return target;
}

int DBAgentInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 up_volume = 1;
    if (has_up_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_volume());
    }

    // required uint32 down_volume = 2;
    if (has_down_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_volume());
    }

    // required uint32 handle_select_count = 3;
    if (has_handle_select_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_select_count());
    }

    // required uint32 handle_insert_count = 4;
    if (has_handle_insert_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_insert_count());
    }

    // required uint32 handle_update_count = 5;
    if (has_handle_update_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_update_count());
    }

    // required uint32 handle_delete_count = 6;
    if (has_handle_delete_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->handle_delete_count());
    }

    // required uint32 client_num = 7;
    if (has_client_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->client_num());
    }

    // required uint32 queue_num = 8;
    if (has_queue_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->queue_num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAgentInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAgentInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAgentInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAgentInfoRsp::MergeFrom(const DBAgentInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_up_volume()) {
      set_up_volume(from.up_volume());
    }
    if (from.has_down_volume()) {
      set_down_volume(from.down_volume());
    }
    if (from.has_handle_select_count()) {
      set_handle_select_count(from.handle_select_count());
    }
    if (from.has_handle_insert_count()) {
      set_handle_insert_count(from.handle_insert_count());
    }
    if (from.has_handle_update_count()) {
      set_handle_update_count(from.handle_update_count());
    }
    if (from.has_handle_delete_count()) {
      set_handle_delete_count(from.handle_delete_count());
    }
    if (from.has_client_num()) {
      set_client_num(from.client_num());
    }
    if (from.has_queue_num()) {
      set_queue_num(from.queue_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAgentInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAgentInfoRsp::CopyFrom(const DBAgentInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAgentInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void DBAgentInfoRsp::Swap(DBAgentInfoRsp* other) {
  if (other != this) {
    std::swap(up_volume_, other->up_volume_);
    std::swap(down_volume_, other->down_volume_);
    std::swap(handle_select_count_, other->handle_select_count_);
    std::swap(handle_insert_count_, other->handle_insert_count_);
    std::swap(handle_update_count_, other->handle_update_count_);
    std::swap(handle_delete_count_, other->handle_delete_count_);
    std::swap(client_num_, other->client_num_);
    std::swap(queue_num_, other->queue_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAgentInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAgentInfoRsp_descriptor_;
  metadata.reflection = DBAgentInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_ActoinType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentReq_ActoinType_descriptor_;
}
bool QueryDBAgentReq_ActoinType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kSelect;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kInsert;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kUpdate;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::kDelete;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::ActoinType_MIN;
const QueryDBAgentReq_ActoinType QueryDBAgentReq::ActoinType_MAX;
const int QueryDBAgentReq::ActoinType_ARRAYSIZE;
#endif  // _MSC_VER
const ::google::protobuf::EnumDescriptor* QueryDBAgentReq_DatabaseType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentReq_DatabaseType_descriptor_;
}
bool QueryDBAgentReq_DatabaseType_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::kRedis;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::kMySQL;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::DatabaseType_MIN;
const QueryDBAgentReq_DatabaseType QueryDBAgentReq::DatabaseType_MAX;
const int QueryDBAgentReq::DatabaseType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int QueryDBAgentReq::kSequenceFieldNumber;
const int QueryDBAgentReq::kDbtypeFieldNumber;
const int QueryDBAgentReq::kActionFieldNumber;
const int QueryDBAgentReq::kDbnameFieldNumber;
const int QueryDBAgentReq::kStatementFieldNumber;
#endif  // !_MSC_VER

QueryDBAgentReq::QueryDBAgentReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.QueryDBAgentReq)
}

void QueryDBAgentReq::InitAsDefaultInstance() {
}

QueryDBAgentReq::QueryDBAgentReq(const QueryDBAgentReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.QueryDBAgentReq)
}

void QueryDBAgentReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  dbtype_ = 1;
  action_ = 1;
  dbname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  statement_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDBAgentReq::~QueryDBAgentReq() {
  // @@protoc_insertion_point(destructor:svr.QueryDBAgentReq)
  SharedDtor();
}

void QueryDBAgentReq::SharedDtor() {
  if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dbname_;
  }
  if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete statement_;
  }
  if (this != default_instance_) {
  }
}

void QueryDBAgentReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDBAgentReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentReq_descriptor_;
}

const QueryDBAgentReq& QueryDBAgentReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

QueryDBAgentReq* QueryDBAgentReq::default_instance_ = NULL;

QueryDBAgentReq* QueryDBAgentReq::New() const {
  return new QueryDBAgentReq;
}

void QueryDBAgentReq::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    sequence_ = 0u;
    dbtype_ = 1;
    action_ = 1;
    if (has_dbname()) {
      if (dbname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dbname_->clear();
      }
    }
    if (has_statement()) {
      if (statement_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        statement_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDBAgentReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.QueryDBAgentReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_dbtype;
        break;
      }

      // required .svr.QueryDBAgentReq.DatabaseType dbtype = 2;
      case 2: {
        if (tag == 16) {
         parse_dbtype:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svr::QueryDBAgentReq_DatabaseType_IsValid(value)) {
            set_dbtype(static_cast< ::svr::QueryDBAgentReq_DatabaseType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_action;
        break;
      }

      // required .svr.QueryDBAgentReq.ActoinType action = 3;
      case 3: {
        if (tag == 24) {
         parse_action:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svr::QueryDBAgentReq_ActoinType_IsValid(value)) {
            set_action(static_cast< ::svr::QueryDBAgentReq_ActoinType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_dbname;
        break;
      }

      // required string dbname = 4;
      case 4: {
        if (tag == 34) {
         parse_dbname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dbname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dbname().data(), this->dbname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dbname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_statement;
        break;
      }

      // optional string statement = 5;
      case 5: {
        if (tag == 42) {
         parse_statement:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_statement()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->statement().data(), this->statement().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "statement");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.QueryDBAgentReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.QueryDBAgentReq)
  return false;
#undef DO_
}

void QueryDBAgentReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.QueryDBAgentReq)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required .svr.QueryDBAgentReq.DatabaseType dbtype = 2;
  if (has_dbtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->dbtype(), output);
  }

  // required .svr.QueryDBAgentReq.ActoinType action = 3;
  if (has_action()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->action(), output);
  }

  // required string dbname = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->dbname(), output);
  }

  // optional string statement = 5;
  if (has_statement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statement().data(), this->statement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statement");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->statement(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.QueryDBAgentReq)
}

::google::protobuf::uint8* QueryDBAgentReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.QueryDBAgentReq)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required .svr.QueryDBAgentReq.DatabaseType dbtype = 2;
  if (has_dbtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->dbtype(), target);
  }

  // required .svr.QueryDBAgentReq.ActoinType action = 3;
  if (has_action()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->action(), target);
  }

  // required string dbname = 4;
  if (has_dbname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dbname().data(), this->dbname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dbname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->dbname(), target);
  }

  // optional string statement = 5;
  if (has_statement()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->statement().data(), this->statement().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "statement");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->statement(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.QueryDBAgentReq)
  return target;
}

int QueryDBAgentReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required .svr.QueryDBAgentReq.DatabaseType dbtype = 2;
    if (has_dbtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->dbtype());
    }

    // required .svr.QueryDBAgentReq.ActoinType action = 3;
    if (has_action()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
    }

    // required string dbname = 4;
    if (has_dbname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dbname());
    }

    // optional string statement = 5;
    if (has_statement()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->statement());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDBAgentReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDBAgentReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDBAgentReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDBAgentReq::MergeFrom(const QueryDBAgentReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_dbtype()) {
      set_dbtype(from.dbtype());
    }
    if (from.has_action()) {
      set_action(from.action());
    }
    if (from.has_dbname()) {
      set_dbname(from.dbname());
    }
    if (from.has_statement()) {
      set_statement(from.statement());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDBAgentReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDBAgentReq::CopyFrom(const QueryDBAgentReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDBAgentReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void QueryDBAgentReq::Swap(QueryDBAgentReq* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(dbtype_, other->dbtype_);
    std::swap(action_, other->action_);
    std::swap(dbname_, other->dbname_);
    std::swap(statement_, other->statement_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDBAgentReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDBAgentReq_descriptor_;
  metadata.reflection = QueryDBAgentReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QueryDBAgentRsp::kSequenceFieldNumber;
const int QueryDBAgentRsp::kResultFieldNumber;
#endif  // !_MSC_VER

QueryDBAgentRsp::QueryDBAgentRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.QueryDBAgentRsp)
}

void QueryDBAgentRsp::InitAsDefaultInstance() {
}

QueryDBAgentRsp::QueryDBAgentRsp(const QueryDBAgentRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.QueryDBAgentRsp)
}

void QueryDBAgentRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  result_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QueryDBAgentRsp::~QueryDBAgentRsp() {
  // @@protoc_insertion_point(destructor:svr.QueryDBAgentRsp)
  SharedDtor();
}

void QueryDBAgentRsp::SharedDtor() {
  if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete result_;
  }
  if (this != default_instance_) {
  }
}

void QueryDBAgentRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QueryDBAgentRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QueryDBAgentRsp_descriptor_;
}

const QueryDBAgentRsp& QueryDBAgentRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

QueryDBAgentRsp* QueryDBAgentRsp::default_instance_ = NULL;

QueryDBAgentRsp* QueryDBAgentRsp::New() const {
  return new QueryDBAgentRsp;
}

void QueryDBAgentRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    sequence_ = 0u;
    if (has_result()) {
      if (result_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        result_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QueryDBAgentRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.QueryDBAgentRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_result;
        break;
      }

      // optional bytes result = 2;
      case 2: {
        if (tag == 18) {
         parse_result:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_result()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.QueryDBAgentRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.QueryDBAgentRsp)
  return false;
#undef DO_
}

void QueryDBAgentRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.QueryDBAgentRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // optional bytes result = 2;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.QueryDBAgentRsp)
}

::google::protobuf::uint8* QueryDBAgentRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.QueryDBAgentRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // optional bytes result = 2;
  if (has_result()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.QueryDBAgentRsp)
  return target;
}

int QueryDBAgentRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // optional bytes result = 2;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QueryDBAgentRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QueryDBAgentRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QueryDBAgentRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QueryDBAgentRsp::MergeFrom(const QueryDBAgentRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QueryDBAgentRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QueryDBAgentRsp::CopyFrom(const QueryDBAgentRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QueryDBAgentRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QueryDBAgentRsp::Swap(QueryDBAgentRsp* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QueryDBAgentRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QueryDBAgentRsp_descriptor_;
  metadata.reflection = QueryDBAgentRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBErrorRsp::kSequenceFieldNumber;
const int DBErrorRsp::kErrorCodeFieldNumber;
const int DBErrorRsp::kWhatFieldNumber;
#endif  // !_MSC_VER

DBErrorRsp::DBErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.DBErrorRsp)
}

void DBErrorRsp::InitAsDefaultInstance() {
}

DBErrorRsp::DBErrorRsp(const DBErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.DBErrorRsp)
}

void DBErrorRsp::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sequence_ = 0u;
  error_code_ = 0;
  what_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBErrorRsp::~DBErrorRsp() {
  // @@protoc_insertion_point(destructor:svr.DBErrorRsp)
  SharedDtor();
}

void DBErrorRsp::SharedDtor() {
  if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete what_;
  }
  if (this != default_instance_) {
  }
}

void DBErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBErrorRsp_descriptor_;
}

const DBErrorRsp& DBErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

DBErrorRsp* DBErrorRsp::default_instance_ = NULL;

DBErrorRsp* DBErrorRsp::New() const {
  return new DBErrorRsp;
}

void DBErrorRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DBErrorRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(sequence_, error_code_);
    if (has_what()) {
      if (what_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        what_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.DBErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 sequence = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_error_code;
        break;
      }

      // required int32 error_code = 2;
      case 2: {
        if (tag == 16) {
         parse_error_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_code_)));
          set_has_error_code();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_what;
        break;
      }

      // optional string what = 3;
      case 3: {
        if (tag == 26) {
         parse_what:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_what()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->what().data(), this->what().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "what");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.DBErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.DBErrorRsp)
  return false;
#undef DO_
}

void DBErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.DBErrorRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->sequence(), output);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error_code(), output);
  }

  // optional string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->what(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.DBErrorRsp)
}

::google::protobuf::uint8* DBErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.DBErrorRsp)
  // required uint32 sequence = 1;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->sequence(), target);
  }

  // required int32 error_code = 2;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error_code(), target);
  }

  // optional string what = 3;
  if (has_what()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->what().data(), this->what().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "what");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->what(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.DBErrorRsp)
  return target;
}

int DBErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 sequence = 1;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

    // required int32 error_code = 2;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error_code());
    }

    // optional string what = 3;
    if (has_what()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->what());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBErrorRsp::MergeFrom(const DBErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_what()) {
      set_what(from.what());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBErrorRsp::CopyFrom(const DBErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBErrorRsp::Swap(DBErrorRsp* other) {
  if (other != this) {
    std::swap(sequence_, other->sequence_);
    std::swap(error_code_, other->error_code_);
    std::swap(what_, other->what_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBErrorRsp_descriptor_;
  metadata.reflection = DBErrorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAgentErrorRsp::kErrorCodeFieldNumber;
const int DBAgentErrorRsp::kSequenceFieldNumber;
#endif  // !_MSC_VER

DBAgentErrorRsp::DBAgentErrorRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.DBAgentErrorRsp)
}

void DBAgentErrorRsp::InitAsDefaultInstance() {
}

DBAgentErrorRsp::DBAgentErrorRsp(const DBAgentErrorRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.DBAgentErrorRsp)
}

void DBAgentErrorRsp::SharedCtor() {
  _cached_size_ = 0;
  error_code_ = 10001;
  sequence_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAgentErrorRsp::~DBAgentErrorRsp() {
  // @@protoc_insertion_point(destructor:svr.DBAgentErrorRsp)
  SharedDtor();
}

void DBAgentErrorRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAgentErrorRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAgentErrorRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAgentErrorRsp_descriptor_;
}

const DBAgentErrorRsp& DBAgentErrorRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

DBAgentErrorRsp* DBAgentErrorRsp::default_instance_ = NULL;

DBAgentErrorRsp* DBAgentErrorRsp::New() const {
  return new DBAgentErrorRsp;
}

void DBAgentErrorRsp::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    error_code_ = 10001;
    sequence_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAgentErrorRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.DBAgentErrorRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .pub.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::pub::ErrorCode_IsValid(value)) {
            set_error_code(static_cast< ::pub::ErrorCode >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_sequence;
        break;
      }

      // optional uint32 sequence = 2;
      case 2: {
        if (tag == 16) {
         parse_sequence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sequence_)));
          set_has_sequence();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.DBAgentErrorRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.DBAgentErrorRsp)
  return false;
#undef DO_
}

void DBAgentErrorRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.DBAgentErrorRsp)
  // required .pub.ErrorCode error_code = 1;
  if (has_error_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->sequence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.DBAgentErrorRsp)
}

::google::protobuf::uint8* DBAgentErrorRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.DBAgentErrorRsp)
  // required .pub.ErrorCode error_code = 1;
  if (has_error_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->error_code(), target);
  }

  // optional uint32 sequence = 2;
  if (has_sequence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->sequence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.DBAgentErrorRsp)
  return target;
}

int DBAgentErrorRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .pub.ErrorCode error_code = 1;
    if (has_error_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
    }

    // optional uint32 sequence = 2;
    if (has_sequence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->sequence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAgentErrorRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAgentErrorRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAgentErrorRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAgentErrorRsp::MergeFrom(const DBAgentErrorRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error_code()) {
      set_error_code(from.error_code());
    }
    if (from.has_sequence()) {
      set_sequence(from.sequence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAgentErrorRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAgentErrorRsp::CopyFrom(const DBAgentErrorRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAgentErrorRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DBAgentErrorRsp::Swap(DBAgentErrorRsp* other) {
  if (other != this) {
    std::swap(error_code_, other->error_code_);
    std::swap(sequence_, other->sequence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAgentErrorRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAgentErrorRsp_descriptor_;
  metadata.reflection = DBAgentErrorRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChildNode::kTypeFieldNumber;
const int ChildNode::kChildIdFieldNumber;
#endif  // !_MSC_VER

ChildNode::ChildNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ChildNode)
}

void ChildNode::InitAsDefaultInstance() {
}

ChildNode::ChildNode(const ChildNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.ChildNode)
}

void ChildNode::SharedCtor() {
  _cached_size_ = 0;
  type_ = 1;
  child_id_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChildNode::~ChildNode() {
  // @@protoc_insertion_point(destructor:svr.ChildNode)
  SharedDtor();
}

void ChildNode::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChildNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChildNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChildNode_descriptor_;
}

const ChildNode& ChildNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

ChildNode* ChildNode::default_instance_ = NULL;

ChildNode* ChildNode::New() const {
  return new ChildNode;
}

void ChildNode::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    type_ = 1;
    child_id_ = 1u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChildNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ChildNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svr.NodeType type = 1;
      case 1: {
        if (tag == 8) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svr::NodeType_IsValid(value)) {
            set_type(static_cast< ::svr::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_child_id;
        break;
      }

      // optional uint32 child_id = 2 [default = 1];
      case 2: {
        if (tag == 16) {
         parse_child_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &child_id_)));
          set_has_child_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ChildNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ChildNode)
  return false;
#undef DO_
}

void ChildNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ChildNode)
  // required .svr.NodeType type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // optional uint32 child_id = 2 [default = 1];
  if (has_child_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->child_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.ChildNode)
}

::google::protobuf::uint8* ChildNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.ChildNode)
  // required .svr.NodeType type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->type(), target);
  }

  // optional uint32 child_id = 2 [default = 1];
  if (has_child_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->child_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.ChildNode)
  return target;
}

int ChildNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svr.NodeType type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
    }

    // optional uint32 child_id = 2 [default = 1];
    if (has_child_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->child_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChildNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChildNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChildNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChildNode::MergeFrom(const ChildNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_child_id()) {
      set_child_id(from.child_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChildNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChildNode::CopyFrom(const ChildNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChildNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ChildNode::Swap(ChildNode* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(child_id_, other->child_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChildNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChildNode_descriptor_;
  metadata.reflection = ChildNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRouterReq::kNodeFieldNumber;
#endif  // !_MSC_VER

LoginRouterReq::LoginRouterReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.LoginRouterReq)
}

void LoginRouterReq::InitAsDefaultInstance() {
  node_ = const_cast< ::svr::ChildNode*>(&::svr::ChildNode::default_instance());
}

LoginRouterReq::LoginRouterReq(const LoginRouterReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.LoginRouterReq)
}

void LoginRouterReq::SharedCtor() {
  _cached_size_ = 0;
  node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRouterReq::~LoginRouterReq() {
  // @@protoc_insertion_point(destructor:svr.LoginRouterReq)
  SharedDtor();
}

void LoginRouterReq::SharedDtor() {
  if (this != default_instance_) {
    delete node_;
  }
}

void LoginRouterReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRouterReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRouterReq_descriptor_;
}

const LoginRouterReq& LoginRouterReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

LoginRouterReq* LoginRouterReq::default_instance_ = NULL;

LoginRouterReq* LoginRouterReq::New() const {
  return new LoginRouterReq;
}

void LoginRouterReq::Clear() {
  if (has_node()) {
    if (node_ != NULL) node_->::svr::ChildNode::Clear();
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRouterReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.LoginRouterReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svr.ChildNode node = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.LoginRouterReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.LoginRouterReq)
  return false;
#undef DO_
}

void LoginRouterReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.LoginRouterReq)
  // required .svr.ChildNode node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.LoginRouterReq)
}

::google::protobuf::uint8* LoginRouterReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.LoginRouterReq)
  // required .svr.ChildNode node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.LoginRouterReq)
  return target;
}

int LoginRouterReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svr.ChildNode node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRouterReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRouterReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRouterReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRouterReq::MergeFrom(const LoginRouterReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      mutable_node()->::svr::ChildNode::MergeFrom(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRouterReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRouterReq::CopyFrom(const LoginRouterReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRouterReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_node()) {
    if (!this->node().IsInitialized()) return false;
  }
  return true;
}

void LoginRouterReq::Swap(LoginRouterReq* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRouterReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRouterReq_descriptor_;
  metadata.reflection = LoginRouterReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LoginRouterRsp::kHeartbeatIntervalFieldNumber;
#endif  // !_MSC_VER

LoginRouterRsp::LoginRouterRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.LoginRouterRsp)
}

void LoginRouterRsp::InitAsDefaultInstance() {
}

LoginRouterRsp::LoginRouterRsp(const LoginRouterRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.LoginRouterRsp)
}

void LoginRouterRsp::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LoginRouterRsp::~LoginRouterRsp() {
  // @@protoc_insertion_point(destructor:svr.LoginRouterRsp)
  SharedDtor();
}

void LoginRouterRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LoginRouterRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRouterRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LoginRouterRsp_descriptor_;
}

const LoginRouterRsp& LoginRouterRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

LoginRouterRsp* LoginRouterRsp::default_instance_ = NULL;

LoginRouterRsp* LoginRouterRsp::New() const {
  return new LoginRouterRsp;
}

void LoginRouterRsp::Clear() {
  heartbeat_interval_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LoginRouterRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.LoginRouterRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heartbeat_interval = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_)));
          set_has_heartbeat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.LoginRouterRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.LoginRouterRsp)
  return false;
#undef DO_
}

void LoginRouterRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.LoginRouterRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heartbeat_interval(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.LoginRouterRsp)
}

::google::protobuf::uint8* LoginRouterRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.LoginRouterRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heartbeat_interval(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.LoginRouterRsp)
  return target;
}

int LoginRouterRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heartbeat_interval = 1;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRouterRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LoginRouterRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LoginRouterRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LoginRouterRsp::MergeFrom(const LoginRouterRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_interval()) {
      set_heartbeat_interval(from.heartbeat_interval());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LoginRouterRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRouterRsp::CopyFrom(const LoginRouterRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRouterRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LoginRouterRsp::Swap(LoginRouterRsp* other) {
  if (other != this) {
    std::swap(heartbeat_interval_, other->heartbeat_interval_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LoginRouterRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LoginRouterRsp_descriptor_;
  metadata.reflection = LoginRouterRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

RouterInfoReq::RouterInfoReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.RouterInfoReq)
}

void RouterInfoReq::InitAsDefaultInstance() {
}

RouterInfoReq::RouterInfoReq(const RouterInfoReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.RouterInfoReq)
}

void RouterInfoReq::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterInfoReq::~RouterInfoReq() {
  // @@protoc_insertion_point(destructor:svr.RouterInfoReq)
  SharedDtor();
}

void RouterInfoReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouterInfoReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterInfoReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterInfoReq_descriptor_;
}

const RouterInfoReq& RouterInfoReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

RouterInfoReq* RouterInfoReq::default_instance_ = NULL;

RouterInfoReq* RouterInfoReq::New() const {
  return new RouterInfoReq;
}

void RouterInfoReq::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouterInfoReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.RouterInfoReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:svr.RouterInfoReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.RouterInfoReq)
  return false;
#undef DO_
}

void RouterInfoReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.RouterInfoReq)
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.RouterInfoReq)
}

::google::protobuf::uint8* RouterInfoReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.RouterInfoReq)
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.RouterInfoReq)
  return target;
}

int RouterInfoReq::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterInfoReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouterInfoReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouterInfoReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouterInfoReq::MergeFrom(const RouterInfoReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouterInfoReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterInfoReq::CopyFrom(const RouterInfoReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoReq::IsInitialized() const {

  return true;
}

void RouterInfoReq::Swap(RouterInfoReq* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouterInfoReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterInfoReq_descriptor_;
  metadata.reflection = RouterInfoReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouterInfoRsp::kUpVolumeFieldNumber;
const int RouterInfoRsp::kDownVolumeFieldNumber;
const int RouterInfoRsp::kNodeListsFieldNumber;
#endif  // !_MSC_VER

RouterInfoRsp::RouterInfoRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.RouterInfoRsp)
}

void RouterInfoRsp::InitAsDefaultInstance() {
}

RouterInfoRsp::RouterInfoRsp(const RouterInfoRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.RouterInfoRsp)
}

void RouterInfoRsp::SharedCtor() {
  _cached_size_ = 0;
  up_volume_ = 0u;
  down_volume_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterInfoRsp::~RouterInfoRsp() {
  // @@protoc_insertion_point(destructor:svr.RouterInfoRsp)
  SharedDtor();
}

void RouterInfoRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouterInfoRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterInfoRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterInfoRsp_descriptor_;
}

const RouterInfoRsp& RouterInfoRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

RouterInfoRsp* RouterInfoRsp::default_instance_ = NULL;

RouterInfoRsp* RouterInfoRsp::New() const {
  return new RouterInfoRsp;
}

void RouterInfoRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RouterInfoRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(up_volume_, down_volume_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  node_lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouterInfoRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.RouterInfoRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 up_volume = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &up_volume_)));
          set_has_up_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_down_volume;
        break;
      }

      // required uint32 down_volume = 2;
      case 2: {
        if (tag == 16) {
         parse_down_volume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &down_volume_)));
          set_has_down_volume();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_lists;
        break;
      }

      // repeated .svr.ChildNode node_lists = 3;
      case 3: {
        if (tag == 26) {
         parse_node_lists:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_lists()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_node_lists;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.RouterInfoRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.RouterInfoRsp)
  return false;
#undef DO_
}

void RouterInfoRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.RouterInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->up_volume(), output);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->down_volume(), output);
  }

  // repeated .svr.ChildNode node_lists = 3;
  for (int i = 0; i < this->node_lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->node_lists(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.RouterInfoRsp)
}

::google::protobuf::uint8* RouterInfoRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.RouterInfoRsp)
  // required uint32 up_volume = 1;
  if (has_up_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->up_volume(), target);
  }

  // required uint32 down_volume = 2;
  if (has_down_volume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->down_volume(), target);
  }

  // repeated .svr.ChildNode node_lists = 3;
  for (int i = 0; i < this->node_lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->node_lists(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.RouterInfoRsp)
  return target;
}

int RouterInfoRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 up_volume = 1;
    if (has_up_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->up_volume());
    }

    // required uint32 down_volume = 2;
    if (has_down_volume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->down_volume());
    }

  }
  // repeated .svr.ChildNode node_lists = 3;
  total_size += 1 * this->node_lists_size();
  for (int i = 0; i < this->node_lists_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_lists(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterInfoRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouterInfoRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouterInfoRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouterInfoRsp::MergeFrom(const RouterInfoRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_lists_.MergeFrom(from.node_lists_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_up_volume()) {
      set_up_volume(from.up_volume());
    }
    if (from.has_down_volume()) {
      set_down_volume(from.down_volume());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouterInfoRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterInfoRsp::CopyFrom(const RouterInfoRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterInfoRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->node_lists())) return false;
  return true;
}

void RouterInfoRsp::Swap(RouterInfoRsp* other) {
  if (other != this) {
    std::swap(up_volume_, other->up_volume_);
    std::swap(down_volume_, other->down_volume_);
    node_lists_.Swap(&other->node_lists_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouterInfoRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterInfoRsp_descriptor_;
  metadata.reflection = RouterInfoRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ForwardReq::kDstFieldNumber;
const int ForwardReq::kUserDataFieldNumber;
#endif  // !_MSC_VER

ForwardReq::ForwardReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.ForwardReq)
}

void ForwardReq::InitAsDefaultInstance() {
  dst_ = const_cast< ::svr::ChildNode*>(&::svr::ChildNode::default_instance());
}

ForwardReq::ForwardReq(const ForwardReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.ForwardReq)
}

void ForwardReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  dst_ = NULL;
  user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ForwardReq::~ForwardReq() {
  // @@protoc_insertion_point(destructor:svr.ForwardReq)
  SharedDtor();
}

void ForwardReq::SharedDtor() {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (this != default_instance_) {
    delete dst_;
  }
}

void ForwardReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ForwardReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ForwardReq_descriptor_;
}

const ForwardReq& ForwardReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

ForwardReq* ForwardReq::default_instance_ = NULL;

ForwardReq* ForwardReq::New() const {
  return new ForwardReq;
}

void ForwardReq::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_dst()) {
      if (dst_ != NULL) dst_->::svr::ChildNode::Clear();
    }
    if (has_user_data()) {
      if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ForwardReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.ForwardReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svr.ChildNode dst = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dst()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // required bytes user_data = 2;
      case 2: {
        if (tag == 18) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.ForwardReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.ForwardReq)
  return false;
#undef DO_
}

void ForwardReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.ForwardReq)
  // required .svr.ChildNode dst = 1;
  if (has_dst()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->dst(), output);
  }

  // required bytes user_data = 2;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.ForwardReq)
}

::google::protobuf::uint8* ForwardReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.ForwardReq)
  // required .svr.ChildNode dst = 1;
  if (has_dst()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->dst(), target);
  }

  // required bytes user_data = 2;
  if (has_user_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.ForwardReq)
  return target;
}

int ForwardReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svr.ChildNode dst = 1;
    if (has_dst()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dst());
    }

    // required bytes user_data = 2;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ForwardReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ForwardReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ForwardReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ForwardReq::MergeFrom(const ForwardReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dst()) {
      mutable_dst()->::svr::ChildNode::MergeFrom(from.dst());
    }
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ForwardReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ForwardReq::CopyFrom(const ForwardReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ForwardReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_dst()) {
    if (!this->dst().IsInitialized()) return false;
  }
  return true;
}

void ForwardReq::Swap(ForwardReq* other) {
  if (other != this) {
    std::swap(dst_, other->dst_);
    std::swap(user_data_, other->user_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ForwardReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ForwardReq_descriptor_;
  metadata.reflection = ForwardReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BroadcastReq::kDstListsFieldNumber;
const int BroadcastReq::kUserDataFieldNumber;
#endif  // !_MSC_VER

BroadcastReq::BroadcastReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.BroadcastReq)
}

void BroadcastReq::InitAsDefaultInstance() {
}

BroadcastReq::BroadcastReq(const BroadcastReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.BroadcastReq)
}

void BroadcastReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BroadcastReq::~BroadcastReq() {
  // @@protoc_insertion_point(destructor:svr.BroadcastReq)
  SharedDtor();
}

void BroadcastReq::SharedDtor() {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (this != default_instance_) {
  }
}

void BroadcastReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BroadcastReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BroadcastReq_descriptor_;
}

const BroadcastReq& BroadcastReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

BroadcastReq* BroadcastReq::default_instance_ = NULL;

BroadcastReq* BroadcastReq::New() const {
  return new BroadcastReq;
}

void BroadcastReq::Clear() {
  if (has_user_data()) {
    if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      user_data_->clear();
    }
  }
  dst_lists_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BroadcastReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.BroadcastReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .svr.NodeType dst_lists = 1;
      case 1: {
        if (tag == 8) {
         parse_dst_lists:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::svr::NodeType_IsValid(value)) {
            add_dst_lists(static_cast< ::svr::NodeType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else if (tag == 10) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedEnumNoInline(
                 input,
                 &::svr::NodeType_IsValid,
                 this->mutable_dst_lists())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(8)) goto parse_dst_lists;
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // required bytes user_data = 2;
      case 2: {
        if (tag == 18) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.BroadcastReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.BroadcastReq)
  return false;
#undef DO_
}

void BroadcastReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.BroadcastReq)
  // repeated .svr.NodeType dst_lists = 1;
  for (int i = 0; i < this->dst_lists_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->dst_lists(i), output);
  }

  // required bytes user_data = 2;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.BroadcastReq)
}

::google::protobuf::uint8* BroadcastReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.BroadcastReq)
  // repeated .svr.NodeType dst_lists = 1;
  for (int i = 0; i < this->dst_lists_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->dst_lists(i), target);
  }

  // required bytes user_data = 2;
  if (has_user_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.BroadcastReq)
  return target;
}

int BroadcastReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required bytes user_data = 2;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

  }
  // repeated .svr.NodeType dst_lists = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dst_lists_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::EnumSize(
        this->dst_lists(i));
    }
    total_size += 1 * this->dst_lists_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BroadcastReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BroadcastReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BroadcastReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BroadcastReq::MergeFrom(const BroadcastReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  dst_lists_.MergeFrom(from.dst_lists_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BroadcastReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BroadcastReq::CopyFrom(const BroadcastReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BroadcastReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  return true;
}

void BroadcastReq::Swap(BroadcastReq* other) {
  if (other != this) {
    dst_lists_.Swap(&other->dst_lists_);
    std::swap(user_data_, other->user_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BroadcastReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BroadcastReq_descriptor_;
  metadata.reflection = BroadcastReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouterNotify::kSrcFieldNumber;
const int RouterNotify::kUserDataFieldNumber;
#endif  // !_MSC_VER

RouterNotify::RouterNotify()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.RouterNotify)
}

void RouterNotify::InitAsDefaultInstance() {
  src_ = const_cast< ::svr::ChildNode*>(&::svr::ChildNode::default_instance());
}

RouterNotify::RouterNotify(const RouterNotify& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.RouterNotify)
}

void RouterNotify::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  src_ = NULL;
  user_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouterNotify::~RouterNotify() {
  // @@protoc_insertion_point(destructor:svr.RouterNotify)
  SharedDtor();
}

void RouterNotify::SharedDtor() {
  if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete user_data_;
  }
  if (this != default_instance_) {
    delete src_;
  }
}

void RouterNotify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouterNotify::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouterNotify_descriptor_;
}

const RouterNotify& RouterNotify::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

RouterNotify* RouterNotify::default_instance_ = NULL;

RouterNotify* RouterNotify::New() const {
  return new RouterNotify;
}

void RouterNotify::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_src()) {
      if (src_ != NULL) src_->::svr::ChildNode::Clear();
    }
    if (has_user_data()) {
      if (user_data_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        user_data_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouterNotify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.RouterNotify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .svr.ChildNode src = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_src()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_user_data;
        break;
      }

      // required bytes user_data = 2;
      case 2: {
        if (tag == 18) {
         parse_user_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_user_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.RouterNotify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.RouterNotify)
  return false;
#undef DO_
}

void RouterNotify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.RouterNotify)
  // required .svr.ChildNode src = 1;
  if (has_src()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->src(), output);
  }

  // required bytes user_data = 2;
  if (has_user_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->user_data(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.RouterNotify)
}

::google::protobuf::uint8* RouterNotify::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.RouterNotify)
  // required .svr.ChildNode src = 1;
  if (has_src()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->src(), target);
  }

  // required bytes user_data = 2;
  if (has_user_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->user_data(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.RouterNotify)
  return target;
}

int RouterNotify::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .svr.ChildNode src = 1;
    if (has_src()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->src());
    }

    // required bytes user_data = 2;
    if (has_user_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->user_data());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterNotify::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouterNotify* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouterNotify*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouterNotify::MergeFrom(const RouterNotify& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_src()) {
      mutable_src()->::svr::ChildNode::MergeFrom(from.src());
    }
    if (from.has_user_data()) {
      set_user_data(from.user_data());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouterNotify::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouterNotify::CopyFrom(const RouterNotify& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterNotify::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_src()) {
    if (!this->src().IsInitialized()) return false;
  }
  return true;
}

void RouterNotify::Swap(RouterNotify* other) {
  if (other != this) {
    std::swap(src_, other->src_);
    std::swap(user_data_, other->user_data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouterNotify::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouterNotify_descriptor_;
  metadata.reflection = RouterNotify_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkerLoginReq::kPartitionIdFieldNumber;
const int LinkerLoginReq::kPublicIpFieldNumber;
const int LinkerLoginReq::kPortFieldNumber;
const int LinkerLoginReq::kLinkerIdFieldNumber;
#endif  // !_MSC_VER

LinkerLoginReq::LinkerLoginReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.LinkerLoginReq)
}

void LinkerLoginReq::InitAsDefaultInstance() {
}

LinkerLoginReq::LinkerLoginReq(const LinkerLoginReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.LinkerLoginReq)
}

void LinkerLoginReq::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  partition_id_ = 0u;
  public_ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_ = 0u;
  linker_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkerLoginReq::~LinkerLoginReq() {
  // @@protoc_insertion_point(destructor:svr.LinkerLoginReq)
  SharedDtor();
}

void LinkerLoginReq::SharedDtor() {
  if (public_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete public_ip_;
  }
  if (this != default_instance_) {
  }
}

void LinkerLoginReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkerLoginReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkerLoginReq_descriptor_;
}

const LinkerLoginReq& LinkerLoginReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

LinkerLoginReq* LinkerLoginReq::default_instance_ = NULL;

LinkerLoginReq* LinkerLoginReq::New() const {
  return new LinkerLoginReq;
}

void LinkerLoginReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LinkerLoginReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(partition_id_, linker_id_);
    if (has_public_ip()) {
      if (public_ip_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        public_ip_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkerLoginReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.LinkerLoginReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 partition_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &partition_id_)));
          set_has_partition_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_public_ip;
        break;
      }

      // required string public_ip = 2;
      case 2: {
        if (tag == 18) {
         parse_public_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_public_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->public_ip().data(), this->public_ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "public_ip");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_port;
        break;
      }

      // required uint32 port = 3;
      case 3: {
        if (tag == 24) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_linker_id;
        break;
      }

      // optional uint32 linker_id = 4;
      case 4: {
        if (tag == 32) {
         parse_linker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linker_id_)));
          set_has_linker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.LinkerLoginReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.LinkerLoginReq)
  return false;
#undef DO_
}

void LinkerLoginReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.LinkerLoginReq)
  // required uint32 partition_id = 1;
  if (has_partition_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->partition_id(), output);
  }

  // required string public_ip = 2;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), this->public_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "public_ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->public_ip(), output);
  }

  // required uint32 port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->port(), output);
  }

  // optional uint32 linker_id = 4;
  if (has_linker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->linker_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.LinkerLoginReq)
}

::google::protobuf::uint8* LinkerLoginReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.LinkerLoginReq)
  // required uint32 partition_id = 1;
  if (has_partition_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->partition_id(), target);
  }

  // required string public_ip = 2;
  if (has_public_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->public_ip().data(), this->public_ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "public_ip");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->public_ip(), target);
  }

  // required uint32 port = 3;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->port(), target);
  }

  // optional uint32 linker_id = 4;
  if (has_linker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->linker_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.LinkerLoginReq)
  return target;
}

int LinkerLoginReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 partition_id = 1;
    if (has_partition_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->partition_id());
    }

    // required string public_ip = 2;
    if (has_public_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->public_ip());
    }

    // required uint32 port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->port());
    }

    // optional uint32 linker_id = 4;
    if (has_linker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linker_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkerLoginReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkerLoginReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkerLoginReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkerLoginReq::MergeFrom(const LinkerLoginReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_partition_id()) {
      set_partition_id(from.partition_id());
    }
    if (from.has_public_ip()) {
      set_public_ip(from.public_ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_linker_id()) {
      set_linker_id(from.linker_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkerLoginReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkerLoginReq::CopyFrom(const LinkerLoginReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkerLoginReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void LinkerLoginReq::Swap(LinkerLoginReq* other) {
  if (other != this) {
    std::swap(partition_id_, other->partition_id_);
    std::swap(public_ip_, other->public_ip_);
    std::swap(port_, other->port_);
    std::swap(linker_id_, other->linker_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkerLoginReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkerLoginReq_descriptor_;
  metadata.reflection = LinkerLoginReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinkerLoginRsp::kHeartbeatIntervalFieldNumber;
const int LinkerLoginRsp::kLinkerIdFieldNumber;
#endif  // !_MSC_VER

LinkerLoginRsp::LinkerLoginRsp()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.LinkerLoginRsp)
}

void LinkerLoginRsp::InitAsDefaultInstance() {
}

LinkerLoginRsp::LinkerLoginRsp(const LinkerLoginRsp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.LinkerLoginRsp)
}

void LinkerLoginRsp::SharedCtor() {
  _cached_size_ = 0;
  heartbeat_interval_ = 0u;
  linker_id_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinkerLoginRsp::~LinkerLoginRsp() {
  // @@protoc_insertion_point(destructor:svr.LinkerLoginRsp)
  SharedDtor();
}

void LinkerLoginRsp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LinkerLoginRsp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinkerLoginRsp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinkerLoginRsp_descriptor_;
}

const LinkerLoginRsp& LinkerLoginRsp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

LinkerLoginRsp* LinkerLoginRsp::default_instance_ = NULL;

LinkerLoginRsp* LinkerLoginRsp::New() const {
  return new LinkerLoginRsp;
}

void LinkerLoginRsp::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LinkerLoginRsp*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(heartbeat_interval_, linker_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinkerLoginRsp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.LinkerLoginRsp)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 heartbeat_interval = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heartbeat_interval_)));
          set_has_heartbeat_interval();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_linker_id;
        break;
      }

      // required uint32 linker_id = 2;
      case 2: {
        if (tag == 16) {
         parse_linker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &linker_id_)));
          set_has_linker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.LinkerLoginRsp)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.LinkerLoginRsp)
  return false;
#undef DO_
}

void LinkerLoginRsp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.LinkerLoginRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->heartbeat_interval(), output);
  }

  // required uint32 linker_id = 2;
  if (has_linker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->linker_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.LinkerLoginRsp)
}

::google::protobuf::uint8* LinkerLoginRsp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.LinkerLoginRsp)
  // required uint32 heartbeat_interval = 1;
  if (has_heartbeat_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->heartbeat_interval(), target);
  }

  // required uint32 linker_id = 2;
  if (has_linker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->linker_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.LinkerLoginRsp)
  return target;
}

int LinkerLoginRsp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 heartbeat_interval = 1;
    if (has_heartbeat_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->heartbeat_interval());
    }

    // required uint32 linker_id = 2;
    if (has_linker_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->linker_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinkerLoginRsp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinkerLoginRsp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinkerLoginRsp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinkerLoginRsp::MergeFrom(const LinkerLoginRsp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_heartbeat_interval()) {
      set_heartbeat_interval(from.heartbeat_interval());
    }
    if (from.has_linker_id()) {
      set_linker_id(from.linker_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinkerLoginRsp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinkerLoginRsp::CopyFrom(const LinkerLoginRsp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinkerLoginRsp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LinkerLoginRsp::Swap(LinkerLoginRsp* other) {
  if (other != this) {
    std::swap(heartbeat_interval_, other->heartbeat_interval_);
    std::swap(linker_id_, other->linker_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinkerLoginRsp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinkerLoginRsp_descriptor_;
  metadata.reflection = LinkerLoginRsp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateLinkerCapacityReq::kLoadFieldNumber;
#endif  // !_MSC_VER

UpdateLinkerCapacityReq::UpdateLinkerCapacityReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.UpdateLinkerCapacityReq)
}

void UpdateLinkerCapacityReq::InitAsDefaultInstance() {
}

UpdateLinkerCapacityReq::UpdateLinkerCapacityReq(const UpdateLinkerCapacityReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.UpdateLinkerCapacityReq)
}

void UpdateLinkerCapacityReq::SharedCtor() {
  _cached_size_ = 0;
  load_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateLinkerCapacityReq::~UpdateLinkerCapacityReq() {
  // @@protoc_insertion_point(destructor:svr.UpdateLinkerCapacityReq)
  SharedDtor();
}

void UpdateLinkerCapacityReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateLinkerCapacityReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateLinkerCapacityReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateLinkerCapacityReq_descriptor_;
}

const UpdateLinkerCapacityReq& UpdateLinkerCapacityReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

UpdateLinkerCapacityReq* UpdateLinkerCapacityReq::default_instance_ = NULL;

UpdateLinkerCapacityReq* UpdateLinkerCapacityReq::New() const {
  return new UpdateLinkerCapacityReq;
}

void UpdateLinkerCapacityReq::Clear() {
  load_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateLinkerCapacityReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.UpdateLinkerCapacityReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 load = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &load_)));
          set_has_load();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.UpdateLinkerCapacityReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.UpdateLinkerCapacityReq)
  return false;
#undef DO_
}

void UpdateLinkerCapacityReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.UpdateLinkerCapacityReq)
  // required uint32 load = 1;
  if (has_load()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->load(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.UpdateLinkerCapacityReq)
}

::google::protobuf::uint8* UpdateLinkerCapacityReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.UpdateLinkerCapacityReq)
  // required uint32 load = 1;
  if (has_load()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->load(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.UpdateLinkerCapacityReq)
  return target;
}

int UpdateLinkerCapacityReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 load = 1;
    if (has_load()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->load());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateLinkerCapacityReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateLinkerCapacityReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateLinkerCapacityReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateLinkerCapacityReq::MergeFrom(const UpdateLinkerCapacityReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_load()) {
      set_load(from.load());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateLinkerCapacityReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateLinkerCapacityReq::CopyFrom(const UpdateLinkerCapacityReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateLinkerCapacityReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateLinkerCapacityReq::Swap(UpdateLinkerCapacityReq* other) {
  if (other != this) {
    std::swap(load_, other->load_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateLinkerCapacityReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateLinkerCapacityReq_descriptor_;
  metadata.reflection = UpdateLinkerCapacityReq_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateUserTokenReq::kUserIdFieldNumber;
const int UpdateUserTokenReq::kTokenFieldNumber;
#endif  // !_MSC_VER

UpdateUserTokenReq::UpdateUserTokenReq()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:svr.UpdateUserTokenReq)
}

void UpdateUserTokenReq::InitAsDefaultInstance() {
}

UpdateUserTokenReq::UpdateUserTokenReq(const UpdateUserTokenReq& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:svr.UpdateUserTokenReq)
}

void UpdateUserTokenReq::SharedCtor() {
  _cached_size_ = 0;
  user_id_ = 0u;
  token_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateUserTokenReq::~UpdateUserTokenReq() {
  // @@protoc_insertion_point(destructor:svr.UpdateUserTokenReq)
  SharedDtor();
}

void UpdateUserTokenReq::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateUserTokenReq::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateUserTokenReq::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateUserTokenReq_descriptor_;
}

const UpdateUserTokenReq& UpdateUserTokenReq::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fserver_5finternal_2eproto();
  return *default_instance_;
}

UpdateUserTokenReq* UpdateUserTokenReq::default_instance_ = NULL;

UpdateUserTokenReq* UpdateUserTokenReq::New() const {
  return new UpdateUserTokenReq;
}

void UpdateUserTokenReq::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UpdateUserTokenReq*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(token_, user_id_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateUserTokenReq::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:svr.UpdateUserTokenReq)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 user_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &user_id_)));
          set_has_user_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_token;
        break;
      }

      // required uint64 token = 2;
      case 2: {
        if (tag == 16) {
         parse_token:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &token_)));
          set_has_token();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:svr.UpdateUserTokenReq)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:svr.UpdateUserTokenReq)
  return false;
#undef DO_
}

void UpdateUserTokenReq::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:svr.UpdateUserTokenReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->user_id(), output);
  }

  // required uint64 token = 2;
  if (has_token()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->token(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:svr.UpdateUserTokenReq)
}

::google::protobuf::uint8* UpdateUserTokenReq::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:svr.UpdateUserTokenReq)
  // required uint32 user_id = 1;
  if (has_user_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->user_id(), target);
  }

  // required uint64 token = 2;
  if (has_token()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->token(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:svr.UpdateUserTokenReq)
  return target;
}

int UpdateUserTokenReq::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 user_id = 1;
    if (has_user_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->user_id());
    }

    // required uint64 token = 2;
    if (has_token()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->token());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateUserTokenReq::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateUserTokenReq* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateUserTokenReq*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateUserTokenReq::MergeFrom(const UpdateUserTokenReq& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_user_id()) {
      set_user_id(from.user_id());
    }
    if (from.has_token()) {
      set_token(from.token());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateUserTokenReq::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateUserTokenReq::CopyFrom(const UpdateUserTokenReq& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateUserTokenReq::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UpdateUserTokenReq::Swap(UpdateUserTokenReq* other) {
  if (other != this) {
    std::swap(user_id_, other->user_id_);
    std::swap(token_, other->token_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateUserTokenReq::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateUserTokenReq_descriptor_;
  metadata.reflection = UpdateUserTokenReq_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace svr

// @@protoc_insertion_point(global_scope)
